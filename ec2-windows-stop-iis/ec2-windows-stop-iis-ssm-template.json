{
  "schemaVersion": "2.2",
  "description": "Stop IIS Application Pool for FIS experiment",
  "parameters": {
    "DurationSeconds": {
      "type": "String",
      "default": "120",
      "description": "Duration of test in seconds.",
      "allowedPattern": "([1-9][0-9]{0,4})|(1[0-6][0-9]{4})|(17[0-1][0-9]{3})|(172[0-7][0-9]{2})|(172800)"
    },
    "IISAppPoolName": {
      "type": "String",
      "default": "DefaultAppPool",
      "description": "Name of the Windows IIS Application Pool to Stop",
      "allowedPattern": "^[a-zA-Z0-9\\-_\\.]{1,50}$"
    }
  },
  "mainSteps": [
    {
      "action": "aws:runPowerShellScript",
      "name": "ValidatePrerequisites",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "inputs": {
        "timeoutSeconds": 60,
        "onFailure": "exit",
        "runCommand": [
          "function Write-Log {",
          "    param($Message)",
          "    $timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'",
          "    Write-Output \"[$timestamp] $Message\"",
          "}",
          "",
          "try {",
          "    # Check if IIS modules are installed",
          "    Write-Log \"Checking if IIS modules are installed...\"",
          "    $iisModule = Get-Module -ListAvailable -Name WebAdministration",
          "    if (-not $iisModule) {",
          "        Write-Log \"ERROR: IIS WebAdministration module is not installed\"",
          "        Exit 1",
          "    }",
          "    Write-Log \"IIS WebAdministration module is installed\"",
          "",
          "    # Import the WebAdministration module",
          "    Import-Module WebAdministration",
          "",
          "    # Check if experiment is already running",
          "    if (Test-Path -Path 'C:\\temp\\fis_windows_iis_experiment.json') {",
          "        Write-Log \"ERROR: fis_windows_iis_experiment.json already exists. Exiting.\"",
          "        Exit 1",
          "    }",
          "",
          "    # Create temp directory if it doesn't exist",
          "    if (-not (Test-Path -Path 'C:\\temp')) {",
          "        Write-Log \"Creating C:\\temp directory\"",
          "        New-Item -Path 'C:\\temp' -ItemType Directory -Force | Out-Null",
          "    }",
          "",
          "    # Verify IIS Application Pool exists",
          "    Write-Log \"Verifying IIS Application Pool: {{IISAppPoolName}}\"",
          "    $appPool = Get-IISAppPool -Name {{IISAppPoolName}} -ErrorAction SilentlyContinue",
          "    if (-not $appPool) {",
          "        Write-Log \"ERROR: Application Pool {{IISAppPoolName}} not found\"",
          "        Exit 1",
          "    }",
          "",
          "    # Verify IIS Application Pool is in Running state",
          "    Write-Log \"Checking if Application Pool {{IISAppPoolName}} is running...\"",
          "    if ($appPool.State -ne \"Started\") {",
          "        Write-Log \"ERROR: Application Pool {{IISAppPoolName}} is not in 'Started' state. Current state: $($appPool.State)\"",
          "        Write-Log \"The experiment requires the application pool to be in 'Started' state to proceed.\"",
          "        Exit 1",
          "    }",
          "    Write-Log \"Application Pool {{IISAppPoolName}} is in 'Started' state. Proceeding with experiment.\"",
          "",
          "    # Store initial state for idempotency",
          "    $initialState = @{",
          "        'AppPoolName' = '{{IISAppPoolName}}'",
          "        'InitialState' = $appPool.State",
          "        'StartTime' = (Get-Date).ToString('o')",
          "        'ExperimentDuration' = {{DurationSeconds}}",
          "    }",
          "    $initialState | ConvertTo-Json | Out-File -FilePath 'C:\\temp\\fis_windows_iis_experiment.json'",
          "    Write-Log \"Prerequisites validated successfully\"",
          "}",
          "catch {",
          "    Write-Log \"ERROR during validation: $($_.Exception.Message)\"",
          "    Exit 1",
          "}"
        ]
      }
    },
    {
      "action": "aws:runPowerShellScript",
      "name": "StopIISAppPool",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "inputs": {
        "timeoutSeconds": 120,
        "onFailure": "exit",
        "runCommand": [
          "function Write-Log {",
          "    param($Message)",
          "    $timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'",
          "    Write-Output \"[$timestamp] $Message\"",
          "}",
          "",
          "try {",
          "    # Import the WebAdministration module",
          "    Import-Module WebAdministration",
          "",
          "    # Load experiment data",
          "    $experimentData = Get-Content -Path 'C:\\temp\\fis_windows_iis_experiment.json' | ConvertFrom-Json",
          "    $start_time = Get-Date",
          "",
          "    # Stop the application pool",
          "    Write-Log \"Stopping IIS Application Pool: {{IISAppPoolName}}\"",
          "    $appPool = Get-IISAppPool -Name {{IISAppPoolName}}",
          "    $appPool | Stop-WebAppPool",
          "",
          "    # Verify the app pool is stopped",
          "    $stoppedPool = Get-IISAppPool -Name {{IISAppPoolName}}",
          "    if ($stoppedPool.State -ne 'Stopped') {",
          "        throw \"Failed to stop application pool\"",
          "    }",
          "    Write-Log \"Application Pool stopped successfully\"",
          "",
          "    # Wait for the specified duration",
          "    Write-Log \"Sleeping for {{DurationSeconds}} seconds\"",
          "    Start-Sleep -Seconds {{DurationSeconds}}",
          "}",
          "catch {",
          "    Write-Log \"ERROR during execution: $($_.Exception.Message)\"",
          "    # Attempt to restore the app pool even if there was an error",
          "    try {",
          "        Write-Log \"Attempting to restore IIS Application Pool after error\"",
          "        Start-WebAppPool -Name {{IISAppPoolName}}",
          "    }",
          "    catch {",
          "        Write-Log \"ERROR during emergency restoration: $($_.Exception.Message)\"",
          "    }",
          "    Exit 1",
          "}"
        ]
      }
    },
    {
      "action": "aws:runPowerShellScript",
      "name": "RestoreIISAppPool",
      "precondition": {
        "StringEquals": [
          "platformType",
          "Windows"
        ]
      },
      "inputs": {
        "timeoutSeconds": 120,
        "onFailure": "successAndExit",
        "runCommand": [
          "function Write-Log {",
          "    param($Message)",
          "    $timestamp = Get-Date -Format 'yyyy-MM-dd HH:mm:ss'",
          "    Write-Output \"[$timestamp] $Message\"",
          "}",
          "",
          "try {",
          "    # Import the WebAdministration module",
          "    Import-Module WebAdministration",
          "",
          "    # Restore the application pool",
          "    Write-Log \"Restoring IIS Application Pool: {{IISAppPoolName}}\"",
          "    Start-WebAppPool -Name {{IISAppPoolName}}",
          "",
          "    # Verify the app pool is started",
          "    $startedPool = Get-IISAppPool -Name {{IISAppPoolName}}",
          "    if ($startedPool.State -ne 'Started') {",
          "        throw \"Failed to start application pool\"",
          "    }",
          "    Write-Log \"Application Pool restored successfully\"",
          "}",
          "catch {",
          "    Write-Log \"ERROR during restoration: $($_.Exception.Message)\"",
          "    throw",
          "}",
          "finally {",
          "    # Cleanup - always remove the experiment file",
          "    try {",
          "        Write-Log \"Cleaning up: Deleting JSON file C:\\temp\\fis_windows_iis_experiment.json\"",
          "        Remove-Item -Path C:\\temp\\fis_windows_iis_experiment.json -Force",
          "        Write-Log \"JSON file deleted successfully\"",
          "    }",
          "    catch {",
          "        Write-Log \"ERROR during cleanup: $($_.Exception.Message)\"",
          "    }",
          "}"
        ]
      }
    }
  ]
}
