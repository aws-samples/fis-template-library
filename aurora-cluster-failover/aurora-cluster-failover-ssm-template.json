{
  "schemaVersion": "2.2",
  "description": "Run database load test on Aurora PostgreSQL cluster",
  "parameters": {
    "DBHost": {
      "type": "String",
      "description": "Database host endpoint",
      "default": "{{resolve:ssm:/aurora-cluster/endpoint}}"
    },
    "DBPort": {
      "type": "String",
      "description": "Database port",
      "default": "5432"
    },
    "DBName": {
      "type": "String",
      "description": "Database name",
      "default": "mydb"
    },
    "DBUser": {
      "type": "String",
      "description": "Database username",
      "default": "postgres"
    },
    "DBPassword": {
      "type": "String",
      "description": "Database password",
      "default": "{{resolve:secretsmanager:aurora-cluster-password:SecretString:password}}"
    },
    "NumRecords": {
      "type": "String",
      "description": "Number of records to generate",
      "default": "10000"
    },
    "Concurrency": {
      "type": "String",
      "description": "Concurrency level for the load test",
      "default": "5"
    },
    "Duration": {
      "type": "String",
      "description": "Duration of the load test in seconds",
      "default": "600"
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "installDependencies",
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "# Install PostgreSQL client",
          "sudo yum install -y postgresql"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "runLoadTest",
      "inputs": {
        "timeoutSeconds": "900",
        "runCommand": [
          "#!/bin/bash",
          "# Configuration",
          "DB_HOST=\"{{ DBHost }}\"",
          "DB_PORT=\"{{ DBPort }}\"",
          "DB_NAME=\"{{ DBName }}\"",
          "DB_USER=\"{{ DBUser }}\"",
          "DB_PASSWORD=\"{{ DBPassword }}\"",
          "NUM_RECORDS=\"{{ NumRecords }}\"",
          "CONCURRENCY=\"{{ Concurrency }}\"",
          "DURATION=\"{{ Duration }}\"",
          "",
          "# Function to execute SQL",
          "execute_sql() {",
          "  PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c \"$1\"",
          "}",
          "",
          "# Function to execute SQL and return result",
          "execute_sql_return() {",
          "  PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -t -c \"$1\" | tr -d '[:space:]'",
          "}",
          "",
          "# Check connection",
          "echo \"Checking connection to PostgreSQL...\"",
          "if ! execute_sql \"\\conninfo\"; then",
          "  echo \"Failed to connect to PostgreSQL. Please check your connection parameters.\"",
          "  exit 1",
          "fi",
          "",
          "# Create test tables if they don't exist",
          "echo \"Setting up test tables...\"",
          "execute_sql \"",
          "CREATE TABLE IF NOT EXISTS load_test_users (",
          "  id SERIAL PRIMARY KEY,",
          "  username VARCHAR(50) NOT NULL,",
          "  email VARCHAR(100) NOT NULL,",
          "  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,",
          "  status VARCHAR(20) DEFAULT 'active',",
          "  login_count INTEGER DEFAULT 0",
          ");",
          "",
          "CREATE INDEX IF NOT EXISTS idx_load_test_users_username ON load_test_users(username);",
          "CREATE INDEX IF NOT EXISTS idx_load_test_users_email ON load_test_users(email);",
          "CREATE INDEX IF NOT EXISTS idx_load_test_users_status ON load_test_users(status);",
          "",
          "CREATE TABLE IF NOT EXISTS load_test_transactions (",
          "  id SERIAL PRIMARY KEY,",
          "  user_id INTEGER REFERENCES load_test_users(id),",
          "  amount DECIMAL(10,2) NOT NULL,",
          "  transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,",
          "  description TEXT,",
          "  category VARCHAR(50)",
          ");",
          "",
          "CREATE INDEX IF NOT EXISTS idx_load_test_transactions_user_id ON load_test_transactions(user_id);",
          "CREATE INDEX IF NOT EXISTS idx_load_test_transactions_date ON load_test_transactions(transaction_date);",
          "CREATE INDEX IF NOT EXISTS idx_load_test_transactions_category ON load_test_transactions(category);",
          "\"",
          "",
          "# Function to run CPU-intensive queries",
          "run_cpu_intensive_query() {",
          "  local query=\"",
          "  WITH RECURSIVE cpu_load AS (",
          "    SELECT 1 as n, random() as r",
          "    UNION ALL",
          "    SELECT n + 1, random() * r",
          "    FROM cpu_load",
          "    WHERE n < 1000",
          "  ),",
          "  complex_aggregation AS (",
          "    SELECT ",
          "      u.id,",
          "      u.username,",
          "      COUNT(t.id) * SUM(t.amount) / NULLIF(AVG(t.amount), 0) as complex_metric,",
          "      STDDEV(t.amount) as amount_stddev,",
          "      PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY t.amount) as median_amount",
          "    FROM load_test_users u",
          "    JOIN load_test_transactions t ON u.id = t.user_id",
          "    GROUP BY u.id, u.username",
          "  )",
          "  SELECT ca.*, cl.r",
          "  FROM complex_aggregation ca",
          "  CROSS JOIN cpu_load cl",
          "  ORDER BY ca.complex_metric DESC, cl.r",
          "  LIMIT 100;",
          "  \"",
          "  while true; do",
          "    execute_sql \"$query\" > /dev/null 2>&1",
          "    sleep 0.1",
          "  done",
          "}",
          "",
          "# Start CPU-intensive load test",
          "echo \"Starting CPU-intensive load test with concurrency $CONCURRENCY for $DURATION seconds...\"",
          "",
          "# Start worker processes",
          "pids=()",
          "for i in $(seq 1 $CONCURRENCY); do",
          "  run_cpu_intensive_query &",
          "  pids+=($!)",
          "done",
          "",
          "echo \"Load test is running with ${#pids[@]} worker processes.\"",
          "",
          "# Sleep for the specified duration",
          "sleep $DURATION",
          "",
          "# Kill all worker processes",
          "echo \"Stopping load test...\"",
          "for pid in \"${pids[@]}\"; do",
          "  kill -9 $pid 2>/dev/null",
          "done",
          "",
          "echo \"CPU load test completed.\""
        ]
      }
    }
  ]
}
