{"schemaVersion": "2.2", "description": "Temporary MySQL RDS Load Test", "parameters": {"DBHost": {"type": "String", "description": "Database host endpoint", "default": "mysql-rds-loadtest-failover-rdsinstance-7lnsqbmo9icy.ck3zxsrxdcgk.us-east-1.rds.amazonaws.com"}, "DBPort": {"type": "String", "description": "Database port", "default": "3306"}, "DBName": {"type": "String", "description": "Database name", "default": "testdb"}, "DBUsername": {"type": "String", "description": "Database username", "default": "admin"}, "DBPassword": {"type": "String", "description": "Database password"}, "Duration": {"type": "String", "description": "Duration of the test in seconds", "default": "300"}, "Concurrency": {"type": "String", "description": "Number of concurrent connections", "default": "10"}}, "mainSteps": [{"action": "aws:runShellScript", "name": "RunLoadTest", "inputs": {"timeoutSeconds": "600", "runCommand": ["#!/bin/bash\n# Configuration\nDB_HOST=\"{{DBHost}}\"\nDB_PORT=\"{{DBPort}}\"\nDB_NAME=\"{{DBName}}\"\nDB_USER=\"{{DBUsername}}\"\nDB_PASSWORD=\"{{DBPassword}}\"\nDURATION=\"{{Duration}}\"\nCONCURRENCY=\"{{Concurrency}}\"\n\n# Function to execute SQL\nexecute_sql() {\n  mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD $DB_NAME -e \"$1\"\n}\n\n# Function to execute SQL and return result\nexecute_sql_return() {\n  mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD $DB_NAME --skip-column-names -e \"$1\"\n}\n\n# Check connection\necho \"Checking connection to MySQL...\"\nif ! execute_sql \"SELECT VERSION();\"; then\n  echo \"Failed to connect to MySQL. Please check your connection parameters.\"\n  exit 1\nfi\n\n# Create test tables if they don't exist\necho \"Setting up test tables...\"\nexecute_sql \"\nCREATE TABLE IF NOT EXISTS load_test_users (\n  id BIGINT AUTO_INCREMENT PRIMARY KEY,\n  username VARCHAR(50) NOT NULL,\n  email VARCHAR(100) NOT NULL,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  status VARCHAR(20) DEFAULT 'active',\n  login_count INT DEFAULT 0,\n  INDEX idx_load_test_users_username (username),\n  INDEX idx_load_test_users_email (email),\n  INDEX idx_load_test_users_status (status)\n);\n\nCREATE TABLE IF NOT EXISTS load_test_transactions (\n  id BIGINT AUTO_INCREMENT PRIMARY KEY,\n  user_id BIGINT,\n  amount DECIMAL(10,2) NOT NULL,\n  transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  description TEXT,\n  category VARCHAR(50),\n  FOREIGN KEY (user_id) REFERENCES load_test_users(id),\n  INDEX idx_load_test_transactions_user_id (user_id),\n  INDEX idx_load_test_transactions_date (transaction_date),\n  INDEX idx_load_test_transactions_category (category)\n);\"\n\n# Check if we need to populate the tables\nuser_count=$(execute_sql_return \"SELECT COUNT(*) FROM load_test_users;\")\nif [ \"$user_count\" -lt 1000 ]; then\n  echo \"Populating test tables with initial data...\"\n  \n  # Generate random data for users\n  for i in $(seq 1 1000); do\n    username=\"user_$(printf \"%05d\" $i)\"\n    email=\"user_$(printf \"%05d\" $i)@example.com\"\n    status=$( [ $(($RANDOM % 10)) -lt 8 ] && echo \"active\" || echo \"inactive\" )\n    login_count=$(($RANDOM % 100))\n    \n    execute_sql \"INSERT INTO load_test_users (username, email, status, login_count) \n                VALUES ('$username', '$email', '$status', $login_count);\"\n    \n    # Print progress every 100 records\n    if [ $(($i % 100)) -eq 0 ]; then\n      echo \"Inserted $i users...\"\n    fi\n  done\n  \n  # Generate transactions for each user\n  echo \"Generating transactions...\"\n  execute_sql \"\n  INSERT INTO load_test_transactions (user_id, amount, transaction_date, description, category)\n  SELECT \n    id as user_id,\n    ROUND(RAND() * 1000, 2) as amount,\n    DATE_SUB(NOW(), INTERVAL FLOOR(RAND() * 90) DAY) as transaction_date,\n    CONCAT('Transaction description ', id) as description,\n    CASE (id % 5)\n      WHEN 0 THEN 'food'\n      WHEN 1 THEN 'entertainment'\n      WHEN 2 THEN 'transport'\n      WHEN 3 THEN 'utilities'\n      ELSE 'other'\n    END as category\n  FROM load_test_users;\"\n  \n  echo \"Initial data population complete.\"\nfi\n\n# Function to run a simple query\nrun_simple_query() {\n  local pid=$1\n  local query=\"SELECT * FROM load_test_users ORDER BY RAND() LIMIT 10;\"\n  while [ true ]; do\n    execute_sql \"$query\" > /dev/null\n    sleep 0.1\n  done\n}\n\n# Function to run a medium complexity query\nrun_medium_query() {\n  local pid=$1\n  local query=\"\n  SELECT u.username, COUNT(t.id) as transaction_count, SUM(t.amount) as total_amount\n  FROM load_test_users u\n  JOIN load_test_transactions t ON u.id = t.user_id\n  WHERE u.status = 'active'\n  GROUP BY u.username\n  ORDER BY total_amount DESC\n  LIMIT 20;\"\n  while [ true ]; do\n    execute_sql \"$query\" > /dev/null\n    sleep 0.5\n  done\n}\n\n# Function to run a complex query\nrun_complex_query() {\n  local pid=$1\n  local query=\"\n  WITH monthly_stats AS (\n    SELECT \n      u.id as user_id,\n      u.username,\n      DATE_FORMAT(t.transaction_date, '%Y-%m-01') as month,\n      COUNT(t.id) as transaction_count,\n      SUM(t.amount) as total_amount,\n      AVG(t.amount) as avg_amount,\n      t.category\n    FROM load_test_users u\n    JOIN load_test_transactions t ON u.id = t.user_id\n    WHERE u.login_count > 10\n    GROUP BY u.id, u.username, DATE_FORMAT(t.transaction_date, '%Y-%m-01'), t.category\n  )\n  SELECT \n    username,\n    month,\n    category,\n    transaction_count,\n    total_amount,\n    avg_amount,\n    RANK() OVER (PARTITION BY month, category ORDER BY total_amount DESC) as rank\n  FROM monthly_stats\n  ORDER BY month DESC, category, rank\n  LIMIT 50;\"\n  while [ true ]; do\n    execute_sql \"$query\" > /dev/null\n    sleep 1\n  done\n}\n\n# Function to run insert operations\nrun_insert_operations() {\n  local pid=$1\n  while [ true ]; do\n    local username=\"user_$(date +%s%N | md5sum | head -c 10)\"\n    local email=\"${username}@example.com\"\n    local status=$( [ $(($RANDOM % 10)) -lt 8 ] && echo \"active\" || echo \"inactive\" )\n    local login_count=$(($RANDOM % 100))\n    \n    # Insert a new user\n    local user_id=$(execute_sql_return \"\n      INSERT INTO load_test_users (username, email, status, login_count) \n      VALUES ('$username', '$email', '$status', $login_count);\n      SELECT LAST_INSERT_ID();\n    \")\n    \n    # Insert transactions for this user\n    local num_transactions=$(($RANDOM % 5 + 1))\n    for j in $(seq 1 $num_transactions); do\n      local amount=$(printf \"%.2f\" $(echo \"scale=2; $RANDOM/100\" | bc))\n      local days_ago=$(($RANDOM % 90))\n      local category_id=$(($RANDOM % 5))\n      local category=\"\"\n      \n      case $category_id in\n        0) category=\"food\" ;;\n        1) category=\"entertainment\" ;;\n        2) category=\"transport\" ;;\n        3) category=\"utilities\" ;;\n        *) category=\"other\" ;;\n      esac\n      \n      execute_sql \"\n        INSERT INTO load_test_transactions (user_id, amount, transaction_date, description, category)\n        VALUES ($user_id, $amount, DATE_SUB(NOW(), INTERVAL $days_ago DAY), 'Transaction for $username', '$category');\" > /dev/null\n    done\n    \n    sleep 0.2\n  done\n}\n\n# Function to monitor MySQL statistics\nmonitor_mysql_stats() {\n  while [ true ]; do\n    echo \"--- MySQL Statistics $(date) ---\"\n    execute_sql \"\n    SHOW GLOBAL STATUS WHERE Variable_name IN (\n      'Threads_connected',\n      'Com_commit',\n      'Com_rollback',\n      'Innodb_buffer_pool_read_requests',\n      'Innodb_buffer_pool_reads',\n      'Select_scan',\n      'Com_select',\n      'Com_insert',\n      'Com_update',\n      'Com_delete'\n    );\"\n    sleep 5\n  done\n}\n\n# Start the load test\necho \"Starting load test with concurrency $CONCURRENCY for $DURATION seconds...\"\n\n# Start monitoring in the background\nmonitor_mysql_stats &\nMONITOR_PID=$!\n\n# Start the worker processes\npids=()\n\n# Start simple query workers\nfor i in $(seq 1 $CONCURRENCY); do\n  run_simple_query $i &\n  pids+=($!)\ndone\n\n# Start medium query workers\nfor i in $(seq 1 $(($CONCURRENCY / 2))); do\n  run_medium_query $i &\n  pids+=($!)\ndone\n\n# Start complex query workers\nfor i in $(seq 1 $(($CONCURRENCY / 3))); do\n  run_complex_query $i &\n  pids+=($!)\ndone\n\n# Start insert operations\nfor i in $(seq 1 $(($CONCURRENCY / 4 + 1))); do\n  run_insert_operations $i &\n  pids+=($!)\ndone\n\necho \"Load test is running with ${#pids[@]} worker processes. Will run for $DURATION seconds.\"\n\n# Sleep for the specified duration\nsleep $DURATION\n\n# Kill all worker processes\necho \"Stopping load test...\"\nfor pid in \"${pids[@]}\"; do\n  kill -9 $pid 2>/dev/null\ndone\n\n# Kill the monitoring process\nkill -9 $MONITOR_PID 2>/dev/null\n\n# Final statistics\necho \"--- Final Database Statistics ---\"\nexecute_sql \"\nSELECT COUNT(*) as total_users FROM load_test_users;\nSELECT COUNT(*) as total_transactions FROM load_test_transactions;\n\"\n\necho \"Load test completed.\"\n"]}}]}
