AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation template for MySQL RDS load testing with FIS'

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC

  PublicSubnetCIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for public subnet

  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for private subnet 1

  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for private subnet 2

  DBName:
    Type: String
    Default: testdb
    Description: Database name

  DBUsername:
    Type: String
    Default: admin
    Description: Database admin username

  DBPassword:
    Type: String
    NoEcho: true
    Description: Database admin password
    
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: Latest Amazon Linux 2 AMI from SSM Parameter Store

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: MySQL-LoadTest-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: Public Subnet

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private Subnet 2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instance
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VPC Endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  SSMVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  SSMMessagesVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  EC2MessagesVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  FISLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/fis/experiment
      RetentionInDays: 7
      
  FISLoggingPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for FIS to write logs to CloudWatch
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogDelivery
              - logs:DeleteLogDelivery
              - logs:DescribeLogGroups
              - logs:DescribeResourcePolicies
              - logs:PutResourcePolicy
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'

  FISSSMPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Policy for FIS to execute SSM commands
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:SendCommand
              - ssm:GetCommandInvocation
              - ssm:ListCommands
              - ssm:ListCommandInvocations
            Resource: '*'

  FISExperimentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: fis.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSFaultInjectionSimulatorRDSAccess
        - !Ref FISLoggingPolicy
        - !Ref FISSSMPolicy

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      Engine: mysql
      EngineVersion: 8.0
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: db.t3.small
      AllocatedStorage: '20'
      MultiAZ: true
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 1
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.small
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update system and install required packages
          yum update -y
          yum install -y amazon-ssm-agent mysql bc jq

          # Make sure mysql is in PATH for all users
          echo 'export PATH=$PATH:/usr/bin' > /etc/profile.d/mysql-path.sh
          chmod +x /etc/profile.d/mysql-path.sh

          # Start SSM agent
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent

  SSMLoadTestDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: 'Run high CPU load test for MySQL RDS until target CPU utilization is reached'
        parameters:
          DBHost:
            type: String
            description: 'Database host endpoint'
            default: ''
          DBPort:
            type: String
            description: 'Database port'
            default: '3306'
          DBName:
            type: String
            description: 'Database name'
            default: 'testdb'
          DBUsername:
            type: String
            description: 'Database username'
            default: 'admin'
          DBPassword:
            type: String
            description: 'Database password'
          Duration:
            type: String
            description: 'Maximum duration of the test in seconds'
            default: '600'
          Concurrency:
            type: String
            description: 'Number of concurrent connections'
            default: '25'
          TargetCPU:
            type: String
            description: 'Target CPU utilization percentage to reach before completing'
            default: '80'
          DBInstanceId:
            type: String
            description: 'RDS DB Instance Identifier'
            default: ''
        mainSteps:
          - action: aws:runShellScript
            name: installDependencies
            inputs:
              runCommand:
                - |
                  #!/bin/bash
                  # Install MySQL client and other dependencies
                  sudo yum install -y mysql bc jq
          - action: aws:runShellScript
            name: runHighLoadTest
            inputs:
              timeoutSeconds: '900'  # 15 minutes timeout
              runCommand:
                - |
                  #!/bin/bash
                  # Configuration
                  DB_HOST="{{DBHost}}"
                  DB_PORT="{{DBPort}}"
                  DB_NAME="{{DBName}}"
                  DB_USER="{{DBUsername}}"
                  DB_PASSWORD="{{DBPassword}}"
                  MAX_DURATION="{{Duration}}"
                  CONCURRENCY="{{Concurrency}}"
                  TARGET_CPU="{{TargetCPU}}"
                  DB_INSTANCE_ID="{{DBInstanceId}}"
                  
                  # If DB_INSTANCE_ID is not provided, try to extract it from the hostname
                  if [ -z "$DB_INSTANCE_ID" ]; then
                    DB_INSTANCE_ID=$(echo $DB_HOST | cut -d'.' -f1)
                    echo "DB Instance ID not provided, extracted from hostname: $DB_INSTANCE_ID"
                  fi
                  
                  # Function to execute SQL
                  execute_sql() {
                    mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD $DB_NAME -e "$1"
                  }

                  # Function to execute SQL and return result
                  execute_sql_return() {
                    mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD $DB_NAME --skip-column-names -e "$1"
                  }
                  
                  # Function to get current CPU utilization
                  get_cpu_utilization() {
                    local result=$(aws cloudwatch get-metric-statistics \
                      --namespace AWS/RDS \
                      --metric-name CPUUtilization \
                      --dimensions Name=DBInstanceIdentifier,Value=$DB_INSTANCE_ID \
                      --start-time $(date -u -d '2 minutes ago' '+%Y-%m-%dT%H:%M:%SZ') \
                      --end-time $(date -u '+%Y-%m-%dT%H:%M:%SZ') \
                      --period 60 \
                      --statistics Average \
                      --output json)
                    
                    # Extract the latest datapoint value
                    local cpu=$(echo $result | jq -r '.Datapoints[0].Average // 0')
                    echo $cpu
                  }

                  # Check connection
                  echo "Checking connection to MySQL..."
                  if ! execute_sql "SELECT VERSION();"; then
                    echo "Failed to connect to MySQL. Please check your connection parameters."
                    exit 1
                  fi

                  # Create test database and table if they don't exist
                  echo "Setting up test database and tables..."
                  mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD -e "CREATE DATABASE IF NOT EXISTS $DB_NAME;"
                  
                  execute_sql "CREATE TABLE IF NOT EXISTS loadtest (
                    id INT AUTO_INCREMENT PRIMARY KEY, 
                    data VARCHAR(1024), 
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                  );"

                  # Function to run a single worker process
                  run_worker() {
                    local worker_id=$1
                    local end_time=$2
                    
                    while [ $(date +%s) -lt $end_time ]; do
                      # Insert random data
                      execute_sql "INSERT INTO loadtest (data) VALUES (REPEAT(MD5(RAND()), 8));"
                      
                      # Run complex queries to increase CPU load
                      execute_sql "SELECT COUNT(*) FROM loadtest WHERE id % 10 = $worker_id;"
                      execute_sql "SELECT AVG(LENGTH(data)) FROM loadtest WHERE id % 10 = $worker_id;"
                      execute_sql "SELECT data, COUNT(*) FROM loadtest GROUP BY data HAVING COUNT(*) > 1 LIMIT 10;"
                      
                      # Run a join query that will force table scans
                      execute_sql "SELECT a.id, b.id, LENGTH(a.data) + LENGTH(b.data) 
                                  FROM loadtest a JOIN loadtest b ON a.id % 100 = b.id % 100 
                                  LIMIT 100;"
                    done
                  }

                  # Calculate end time
                  END_TIME=$(($(date +%s) + MAX_DURATION))

                  # Start worker processes in background
                  echo "Starting $CONCURRENCY worker processes for up to $MAX_DURATION seconds..."
                  for i in $(seq 1 $CONCURRENCY); do
                    run_worker $i $END_TIME &
                  done
                  
                  # Store worker PIDs
                  WORKER_PIDS=$(jobs -p)
                  
                  # Monitor CPU usage and wait until target is reached or timeout
                  echo "Monitoring CPU usage until it reaches $TARGET_CPU% (or $MAX_DURATION seconds elapse)..."
                  start_time=$(date +%s)
                  target_reached=false
                  
                  while [ $(date +%s) -lt $END_TIME ]; do
                    # Get current connections
                    CONNECTIONS=$(execute_sql_return "SELECT COUNT(*) FROM information_schema.processlist WHERE user = '$DB_USER';")
                    
                    # Get current CPU utilization
                    current_cpu=$(get_cpu_utilization)
                    current_time=$(date +"%Y-%m-%d %H:%M:%S")
                    
                    echo "$current_time: Active connections: $CONNECTIONS, CPU Utilization: ${current_cpu}%"
                    
                    # Check if we've reached target CPU
                    if (( $(echo "$current_cpu >= $TARGET_CPU" | bc -l) )); then
                      echo "Target CPU utilization of $TARGET_CPU% reached! (Current: ${current_cpu}%)"
                      target_reached=true
                      break
                    fi
                    
                    # Wait before checking again
                    sleep 30
                  done
                  
                  # If target wasn't reached, report it but don't fail
                  if [ "$target_reached" = false ]; then
                    echo "WARNING: Maximum duration of $MAX_DURATION seconds reached without hitting target CPU of $TARGET_CPU%"
                    echo "Current CPU utilization: $(get_cpu_utilization)%"
                    echo "The test will continue to maintain load for the failover test."
                  else
                    echo "SUCCESS: Target CPU utilization of $TARGET_CPU% reached. Ready for failover test."
                  fi
                  
                  # Keep the load running but exit the script successfully
                  # This allows FIS to proceed to the next action while load continues
                  echo "Load test will continue running in background. Exiting script successfully."
                  disown $WORKER_PIDS
                  exit 0

  FISExperimentTemplate:
    Type: AWS::FIS::ExperimentTemplate
    Properties:
      Description: MySQL RDS Load Test and Failover Experiment
      Targets:
        EC2Instance:
          ResourceType: aws:ec2:instance
          ResourceArns:
            - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${EC2Instance}
          SelectionMode: ALL
        DBInstances:
          ResourceType: aws:rds:db
          ResourceArns:
            - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${RDSInstance}
          SelectionMode: ALL
      Actions:
        RunLoadTest:
          ActionId: aws:ssm:send-command
          Description: Run MySQL high CPU load test until target CPU utilization is reached
          Parameters:
            documentArn: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/${SSMLoadTestDocument}
            documentParameters: !Sub '{"Duration":"600","Concurrency":"25","DBHost":"${RDSInstance.Endpoint.Address}","DBName":"${DBName}","DBUsername":"${DBUsername}","DBPassword":"${DBPassword}","TargetCPU":"80","DBInstanceId":"${RDSInstance}"}'
            duration: PT15M
          Targets:
            Instances: EC2Instance
        ForceFailover:
          ActionId: aws:rds:reboot-db-instances
          Description: Force a failover by rebooting the primary instance with failover
          Parameters:
            forceFailover: "true"
          Targets:
            DBInstances: DBInstances
          StartAfter:
            - RunLoadTest
        StopLoadTest:
          ActionId: aws:ssm:send-command
          Description: Stop the load test after failover completes
          Parameters:
            documentArn: !Sub arn:aws:ssm:${AWS::Region}::document/AWS-RunShellScript
            documentParameters: '{"commands":["pkill -f \"run_worker\"","echo \"Load test stopped\""]}'
            duration: PT1M
          Targets:
            Instances: EC2Instance
          StartAfter:
            - ForceFailover
          StartAfterDelay: PT5M
      StopConditions:
        - Source: none
      RoleArn: !GetAtt FISExperimentRole.Arn
      LogConfiguration:
        LogSchemaVersion: 2
        CloudWatchLogsConfiguration:
          LogGroupArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/fis/experiment:*
      Tags:
        Name: MySQL-RDS-LoadTest-Failover
        Environment: Test
        Application: RDS-Failover-Testing

Outputs:
  EC2InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance

  RDSEndpoint:
    Description: RDS Instance Endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address

  RDSPort:
    Description: RDS Instance Port
    Value: !GetAtt RDSInstance.Endpoint.Port

  SSMDocumentName:
    Description: SSM Document Name
    Value: !Ref SSMLoadTestDocument
    
  FISExperimentTemplateId:
    Description: FIS Experiment Template ID
    Value: !Ref FISExperimentTemplate
