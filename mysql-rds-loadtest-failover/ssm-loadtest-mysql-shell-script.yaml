schemaVersion: '2.2'
description: 'Run high CPU load test for MySQL RDS'
parameters:
  DBHost:
    type: String
    description: 'Database host endpoint'
    default: ''
  DBPort:
    type: String
    description: 'Database port'
    default: '3306'
  DBName:
    type: String
    description: 'Database name'
    default: 'testdb'
  DBUsername:
    type: String
    description: 'Database username'
    default: 'admin'
  DBPassword:
    type: String
    description: 'Database password'
  Duration:
    type: String
    description: 'Duration of the test in seconds'
    default: '300'
  Concurrency:
    type: String
    description: 'Number of concurrent connections'
    default: '25'
mainSteps:
- action: 'aws:runShellScript'
  name: 'installDependencies'
  inputs:
    runCommand:
    - |
      #!/bin/bash
      # Install MySQL client and other dependencies
      sudo yum install -y mysql bc
- action: 'aws:runShellScript'
  name: 'runHighLoadTest'
  inputs:
    timeoutSeconds: '3600'
    runCommand:
    - |
      #!/bin/bash
      # Configuration
      DB_HOST="{{DBHost}}"
      DB_PORT="{{DBPort}}"
      DB_NAME="{{DBName}}"
      DB_USER="{{DBUsername}}"
      DB_PASSWORD="{{DBPassword}}"
      DURATION="{{Duration}}"
      CONCURRENCY="{{Concurrency}}"

      # Function to execute SQL
      execute_sql() {
        mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD $DB_NAME -e "$1"
      }

      # Function to execute SQL and return result
      execute_sql_return() {
        mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD $DB_NAME --skip-column-names -e "$1"
      }

      # Check connection
      echo "Checking connection to MySQL..."
      if ! execute_sql "SELECT VERSION();"; then
        echo "Failed to connect to MySQL. Please check your connection parameters."
        exit 1
      fi

      # Create test database and table if they don't exist
      echo "Setting up test database and tables..."
      mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD -e "CREATE DATABASE IF NOT EXISTS $DB_NAME;"
      
      execute_sql "CREATE TABLE IF NOT EXISTS loadtest (
        id INT AUTO_INCREMENT PRIMARY KEY, 
        data VARCHAR(1024), 
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );"

      # Function to run a single worker process
      run_worker() {
        local worker_id=$1
        local end_time=$2
        
        while [ $(date +%s) -lt $end_time ]; do
          # Insert random data
          execute_sql "INSERT INTO loadtest (data) VALUES (REPEAT(MD5(RAND()), 8));"
          
          # Run complex queries to increase CPU load
          execute_sql "SELECT COUNT(*) FROM loadtest WHERE id % 10 = $worker_id;"
          execute_sql "SELECT AVG(LENGTH(data)) FROM loadtest WHERE id % 10 = $worker_id;"
          execute_sql "SELECT data, COUNT(*) FROM loadtest GROUP BY data HAVING COUNT(*) > 1 LIMIT 10;"
          
          # Run a join query that will force table scans
          execute_sql "SELECT a.id, b.id, LENGTH(a.data) + LENGTH(b.data) 
                      FROM loadtest a JOIN loadtest b ON a.id % 100 = b.id % 100 
                      LIMIT 100;"
        done
      }

      # Calculate end time
      END_TIME=$(($(date +%s) + DURATION))

      # Start worker processes in background
      echo "Starting $CONCURRENCY worker processes for $DURATION seconds..."
      for i in $(seq 1 $CONCURRENCY); do
        run_worker $i $END_TIME &
      done

      # Monitor CPU usage during the test
      echo "Monitoring CPU usage during test..."
      while [ $(date +%s) -lt $END_TIME ]; do
        # Get current connections
        CONNECTIONS=$(execute_sql_return "SELECT COUNT(*) FROM information_schema.processlist WHERE user = '$DB_USER';")
        echo "$(date): Active connections: $CONNECTIONS"
        sleep 10
      done

      # Wait for all workers to complete
      wait

      # Final statistics
      echo "--- Final Database Statistics ---"
      execute_sql "SELECT COUNT(*) as total_rows FROM loadtest;"
      execute_sql "SELECT AVG(LENGTH(data)) as avg_data_length FROM loadtest;"
      execute_sql "SELECT COUNT(DISTINCT data) as unique_data_values FROM loadtest;"

      echo "Load test completed successfully."
