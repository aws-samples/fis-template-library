{
  "schemaVersion": "2.2",
  "description": "Run high CPU load test for MySQL RDS until target CPU utilization is reached",
  "parameters": {
    "DBHost": {
      "type": "String",
      "description": "Database host endpoint",
      "default": ""
    },
    "DBPort": {
      "type": "String",
      "description": "Database port",
      "default": "3306"
    },
    "DBName": {
      "type": "String",
      "description": "Database name",
      "default": "testdb"
    },
    "DBUsername": {
      "type": "String",
      "description": "Database username",
      "default": "admin"
    },
    "DBPassword": {
      "type": "String",
      "description": "Database password"
    },
    "Duration": {
      "type": "String",
      "description": "Maximum duration of the test in seconds",
      "default": "600"
    },
    "Concurrency": {
      "type": "String",
      "description": "Number of concurrent connections",
      "default": "25"
    },
    "TargetCPU": {
      "type": "String",
      "description": "Target CPU utilization percentage to reach before completing",
      "default": "80"
    },
    "DBInstanceId": {
      "type": "String",
      "description": "RDS DB Instance Identifier",
      "default": ""
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "installDependencies",
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "# Install MySQL client and other dependencies",
          "sudo yum install -y mysql bc jq"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "runHighLoadTest",
      "inputs": {
        "timeoutSeconds": "900",
        "runCommand": [
          "#!/bin/bash",
          "# Configuration",
          "DB_HOST=\"{{DBHost}}\"",
          "DB_PORT=\"{{DBPort}}\"",
          "DB_NAME=\"{{DBName}}\"",
          "DB_USER=\"{{DBUsername}}\"",
          "DB_PASSWORD=\"{{DBPassword}}\"",
          "MAX_DURATION=\"{{Duration}}\"",
          "CONCURRENCY=\"{{Concurrency}}\"",
          "TARGET_CPU=\"{{TargetCPU}}\"",
          "DB_INSTANCE_ID=\"{{DBInstanceId}}\"",
          "",
          "# If DB_INSTANCE_ID is not provided, try to extract it from the hostname",
          "if [ -z \"$DB_INSTANCE_ID\" ]; then",
          "  DB_INSTANCE_ID=$(echo $DB_HOST | cut -d'.' -f1)",
          "  echo \"DB Instance ID not provided, extracted from hostname: $DB_INSTANCE_ID\"",
          "fi",
          "",
          "# Function to execute SQL",
          "execute_sql() {",
          "  mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD $DB_NAME -e \"$1\"",
          "}",
          "",
          "# Function to execute SQL and return result",
          "execute_sql_return() {",
          "  mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD $DB_NAME --skip-column-names -e \"$1\"",
          "}",
          "",
          "# Function to get current CPU utilization",
          "get_cpu_utilization() {",
          "  local result=$(aws cloudwatch get-metric-statistics \\",
          "    --namespace AWS/RDS \\",
          "    --metric-name CPUUtilization \\",
          "    --dimensions Name=DBInstanceIdentifier,Value=$DB_INSTANCE_ID \\",
          "    --start-time $(date -u -d '2 minutes ago' '+%Y-%m-%dT%H:%M:%SZ') \\",
          "    --end-time $(date -u '+%Y-%m-%dT%H:%M:%SZ') \\",
          "    --period 60 \\",
          "    --statistics Average \\",
          "    --output json)",
          "  ",
          "  # Extract the latest datapoint value",
          "  local cpu=$(echo $result | jq -r '.Datapoints[0].Average // 0')",
          "  echo $cpu",
          "}",
          "",
          "# Check connection",
          "echo \"Checking connection to MySQL...\"",
          "if ! execute_sql \"SELECT VERSION();\"; then",
          "  echo \"Failed to connect to MySQL. Please check your connection parameters.\"",
          "  exit 1",
          "fi",
          "",
          "# Create test database and table if they don't exist",
          "echo \"Setting up test database and tables...\"",
          "mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD -e \"CREATE DATABASE IF NOT EXISTS $DB_NAME;\"",
          "",
          "execute_sql \"CREATE TABLE IF NOT EXISTS loadtest (",
          "  id INT AUTO_INCREMENT PRIMARY KEY,",
          "  data VARCHAR(1024),",
          "  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP",
          ");\"",
          "",
          "# Function to run a single worker process",
          "mysql_load_worker() {",
          "  local worker_id=$1",
          "  local end_time=$2",
          "  ",
          "  while [ $(date +%s) -lt $end_time ]; do",
          "    # Insert random data",
          "    execute_sql \"INSERT INTO loadtest (data) VALUES (REPEAT(MD5(RAND()), 8));\"",
          "    ",
          "    # Run complex queries to increase CPU load",
          "    execute_sql \"SELECT COUNT(*) FROM loadtest WHERE id % 10 = $worker_id;\"",
          "    execute_sql \"SELECT AVG(LENGTH(data)) FROM loadtest WHERE id % 10 = $worker_id;\"",
          "    execute_sql \"SELECT data, COUNT(*) FROM loadtest GROUP BY data HAVING COUNT(*) > 1 LIMIT 10;\"",
          "    ",
          "    # Run a join query that will force table scans",
          "    execute_sql \"SELECT a.id, b.id, LENGTH(a.data) + LENGTH(b.data)",
          "                FROM loadtest a JOIN loadtest b ON a.id % 100 = b.id % 100",
          "                LIMIT 100;\"",
          "  done",
          "}",
          "",
          "# Calculate end time",
          "END_TIME=$(($(date +%s) + MAX_DURATION))",
          "",
          "# Start worker processes in background",
          "echo \"Starting $CONCURRENCY worker processes for up to $MAX_DURATION seconds...\"",
          "for i in $(seq 1 $CONCURRENCY); do",
          "  mysql_load_worker $i $END_TIME &",
          "done",
          "",
          "# Store worker PIDs",
          "WORKER_PIDS=$(jobs -p)",
          "",
          "# Monitor CPU usage and wait until target is reached or timeout",
          "echo \"Monitoring CPU usage until it reaches $TARGET_CPU% (or $MAX_DURATION seconds elapse)...\"",
          "start_time=$(date +%s)",
          "target_reached=false",
          "",
          "while [ $(date +%s) -lt $END_TIME ]; do",
          "  # Get current connections",
          "  CONNECTIONS=$(execute_sql_return \"SELECT COUNT(*) FROM information_schema.processlist WHERE user = '$DB_USER';\")",
          "  ",
          "  # Get current CPU utilization",
          "  current_cpu=$(get_cpu_utilization)",
          "  current_time=$(date +\"%Y-%m-%d %H:%M:%S\")",
          "  ",
          "  echo \"$current_time: Active connections: $CONNECTIONS, CPU Utilization: ${current_cpu}%\"",
          "  ",
          "  # Check if we've reached target CPU",
          "  if (( $(echo \"$current_cpu >= $TARGET_CPU\" | bc -l) )); then",
          "    echo \"Target CPU utilization of $TARGET_CPU% reached! (Current: ${current_cpu}%)\"",
          "    target_reached=true",
          "    break",
          "  fi",
          "  ",
          "  # Wait before checking again",
          "  sleep 30",
          "done",
          "",
          "# If target wasn't reached, report it but don't fail",
          "if [ \"$target_reached\" = false ]; then",
          "  echo \"WARNING: Maximum duration of $MAX_DURATION seconds reached without hitting target CPU of $TARGET_CPU%\"",
          "  echo \"Current CPU utilization: $(get_cpu_utilization)%\"",
          "  echo \"The test will continue to maintain load for the failover test.\"",
          "else",
          "  echo \"SUCCESS: Target CPU utilization of $TARGET_CPU% reached. Ready for failover test.\"",
          "fi",
          "",
          "# Keep the load running but exit the script successfully",
          "# This allows FIS to proceed to the next action while load continues",
          "echo \"Load test will continue running in background. Exiting script successfully.\"",
          "disown $WORKER_PIDS",
          "exit 0"
        ]
      }
    }
  ]
}
