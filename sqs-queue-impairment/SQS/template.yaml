AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Builds an SQS queue and a FIS Experiment which will will simulate an impairment in SQS

Resources:
  # This is a placeholder queue to give the experiment something to act on. Would expect this to already exist if being used for real.
  SqsQueueForExperiment:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub experiment-test-queue-${AWS::AccountId}
      DelaySeconds: 0
      VisibilityTimeout: 30
      MessageRetentionPeriod: 345600
      ReceiveMessageWaitTimeSeconds: 0
      Tags:
        - Key: Purpose
          Value: resilience-testing

  FisReportBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub fis-reports-${AWS::AccountId}

  SQSImpairmentExperimentTemplate:
    Type: AWS::FIS::ExperimentTemplate
    Properties:
      Description: Simulate worsening impairment of SQS
      LogConfiguration:
        LogSchemaVersion: 2
        CloudWatchLogsConfiguration:
          LogGroupArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/fis/experiment:*
      # ExperimentReportConfiguration:
      #   Outputs:
      #     ExperimentReportS3Configuration:
      #       BucketName: !Ref FisReportBucket
      #       Prefix: "fis-reports/"
      #   DataSources:
      #     CloudWatchDashboards:
      #       - DashboardIdentifier: !Sub arn:aws:cloudwatch::${AWS::AccountId}:dashboard/${Stage}-${AWS::Region}
        # PreExperimentDuration: "PT5M"
        # PostExperimentDuration: "PT1M"
      Actions:
        impairSqs2m:
          ActionId: aws:ssm:start-automation-execution
          Description: Simulate worsening impairment of SQS by applying deny-all policy
          Parameters:
            maxDuration: PT1H
            documentArn: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/${SqsImpairmentDocument}
            documentParameters: !Sub |
              {"sqsQueueUrl": "${SqsQueueForExperiment}", "sqsQueueArn": "${SqsQueueForExperiment.Arn}", "duration": "PT2M"}
          Targets: {}
        wait3m1:
          ActionId: aws:fis:wait
          Description: Wait for 3 minutes
          Parameters:
            duration: PT3M
          Targets: {}
          StartAfter:
            - impairSqs2m
        impairSqs5m:
          ActionId: aws:ssm:start-automation-execution
          Description: Simulate worsening impairment of SQS by applying deny-all policy
          Parameters:
            maxDuration: PT1H
            documentArn: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/${SqsImpairmentDocument}
            documentParameters: !Sub |
              {"sqsQueueUrl": "${SqsQueueForExperiment}", "sqsQueueArn": "${SqsQueueForExperiment.Arn}", "duration": "PT5M"}
          Targets: {}
          StartAfter:
            - wait3m1
        wait3m2:
          ActionId: aws:fis:wait
          Description: Wait for 3 minutes
          Parameters:
            duration: PT3M
          Targets: {}
          StartAfter:
            - impairSqs5m
        impairSqs7m:
          ActionId: aws:ssm:start-automation-execution
          Description: Simulate worsening impairment of SQS by applying deny-all policy
          Parameters:
            maxDuration: PT1H
            documentArn: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/${SqsImpairmentDocument}
            documentParameters: !Sub |
              {"sqsQueueUrl": "${SqsQueueForExperiment}", "sqsQueueArn": "${SqsQueueForExperiment.Arn}", "duration": "PT7M"}
          Targets: {}
          StartAfter:
            - wait3m2
        wait2m1:
          ActionId: aws:fis:wait
          Description: Wait for 2 minutes
          Parameters:
            duration: PT2M
          Targets: {}
          StartAfter:
            - impairSqs7m
        impairSqs15m:
          ActionId: aws:ssm:start-automation-execution
          Description: Simulate worsening impairment of SQS by applying deny-all policy
          Parameters:
            maxDuration: PT1H
            documentArn: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/${SqsImpairmentDocument}
            documentParameters: !Sub |
              {"sqsQueueUrl": "${SqsQueueForExperiment}", "sqsQueueArn": "${SqsQueueForExperiment.Arn}", "duration": "PT15M"}
          Targets: {}
          StartAfter:
            - wait2m1
      Targets: {}
      StopConditions:
        - Source: 'none'
      RoleArn:
        !GetAtt FisRole.Arn
      Tags:
        Name: SimulateSqsImpairment
        Purpose: resilience-testing

  SqsImpairmentDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        description: 'Apply a deny-all policy to SQS queue to simulate impairment using Lambda'
        schemaVersion: '0.3'
        assumeRole: !Sub arn:aws:iam::${AWS::AccountId}:role/${SsmRole}
        parameters:
          sqsQueueUrl:
            type: String
            description: 'URL of the SQS queue to impair'
            default: !Ref SqsQueueForExperiment
          sqsQueueArn:
            type: String
            description: 'ARN of the SQS queue to impair'
            default: !GetAtt SqsQueueForExperiment.Arn
          duration:
            type: String
            description: 'Duration of the impairment in ISO8601 format'
            default: 'PT10M'
        mainSteps:
          - name: applyDenyAllPolicy
            action: aws:invokeLambdaFunction
            onFailure: 'step:rollBack'
            onCancel: 'step:rollBack'
            inputs:
              FunctionName: !Ref SqsPolicyUpdaterFunction
              Payload: |
                {
                  "QueueUrl": "{{ sqsQueueUrl }}",
                  "QueueArn": "{{ sqsQueueArn }}",
                  "Action": "add"
                }
          - name: waitForDuration
            action: 'aws:sleep'
            onFailure: 'step:rollBack'
            onCancel: 'step:rollBack'
            inputs:
              Duration: '{{ duration }}'
          - name: rollBack
            action: aws:invokeLambdaFunction
            inputs:
              FunctionName: !Ref SqsPolicyUpdaterFunction
              Payload: |
                {
                  "QueueUrl": "{{ sqsQueueUrl }}",
                  "QueueArn": "{{ sqsQueueArn }}",
                  "Action": "remove"
                }
            isEnd: true
      Name: SqsDenyAllPolicy
      Tags: 
        - Key: Purpose
          Value: resilience-testing

  FISLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/fis/experiment
      RetentionInDays: 14
      Tags:
        - Key: Purpose
          Value: resilience-testing

  # We need to ensure we don't leave the resource policy in a different state to the way we found it
  # this Lambda will add or modify an existing policy and return it to the same state as it was after
  # the experiment completes. 
  SqsPolicyUpdaterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.9
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import cfnresponse
          
          def handler(event, context):
            sqs = boto3.client('sqs')
            queue_url = event.get('QueueUrl')
            queue_arn = event.get('QueueArn')
            action = event.get('Action', 'add')  # 'add' or 'remove'
            
            try:
              # Get existing policy
              response = sqs.get_queue_attributes(
                  QueueUrl=queue_url,
                  AttributeNames=['Policy']
              )
              
              existing_policy = {}
              if 'Policy' in response.get('Attributes', {}):
                  existing_policy = json.loads(response['Attributes']['Policy'])
              else:
                  existing_policy = {
                      "Version": "2012-10-17",
                      "Statement": []
                  }
              
              if action == 'add':
                  # Add deny statement
                  deny_statement = {
                      "Effect": "Deny",
                      "Principal": "*",
                      "Action":  [
                        "sqs:DeleteMessage",
                        "sqs:ChangeMessageVisibility",
                        "sqs:PurgeQueue",
                        "sqs:ReceiveMessage",
                        "sqs:SendMessage"
                      ],
                      "Resource": queue_arn,
                      "Sid": "FISTemporaryDeny"
                  }
                  
                  # Remove any existing statement with the same Sid to avoid duplicates
                  existing_policy['Statement'] = [s for s in existing_policy.get('Statement', []) 
                                                if s.get('Sid') != 'FISTemporaryDeny']
                  
                  existing_policy['Statement'].append(deny_statement)
                  
                  print(f"Adding deny policy to queue {queue_url}")
              else:
                  # Remove deny statement
                  existing_policy['Statement'] = [s for s in existing_policy.get('Statement', []) 
                                                if s.get('Sid') != 'FISTemporaryDeny']
                  print(f"Removing deny policy from queue {queue_url}")
              
              # Set updated policy
              if existing_policy.get('Statement'):
                  sqs.set_queue_attributes(
                      QueueUrl=queue_url,
                      Attributes={
                          'Policy': json.dumps(existing_policy)
                      }
                  )
              else:
                  # If no statements left, remove the policy entirely
                  sqs.set_queue_attributes(
                      QueueUrl=queue_url,
                      Attributes={
                          'Policy': ''
                      }
                  )
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Policy updated successfully')
              }
            except Exception as e:
              print(f"Error updating policy: {str(e)}")
              return {
                  'statusCode': 500,
                  'body': json.dumps(f'Error: {str(e)}')
              }
      Description: Updates SQS queue policy by adding or removing a deny-all statement
      Tags:
        - Key: Purpose
          Value: resilience-testing

  SsmRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement: 
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SsmAction
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: SqsPermission
                Effect: Allow
                Action:
                  - sqs:GetQueueAttributes
                  - sqs:SetQueueAttributes
                  - sqs:RemovePermission
                  - sqs:AddPermission
                Resource: !GetAtt SqsQueueForExperiment.Arn
              - Sid: LambdaInvoke
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt SqsPolicyUpdaterFunction.Arn

  FisRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement: 
          - Effect: Allow
            Principal:
              Service: fis.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSFaultInjectionSimulatorSSMAccess
        - arn:aws:iam::aws:policy/service-role/AWSIoTLogging
      Policies:
        - PolicyName: WriteReport
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AllowPutObjectInBucket
                Effect: Allow
                Action: 
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${FisReportBucket}/*
              - Sid: AllowLogDelivery
                Effect: Allow
                Action: 
                  - logs:CreateLogDelivery
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: '*'
              - Sid: ReportCreation
                Action:
                  - cloudwatch:getDashboard
                Resource: !Sub arn:aws:cloudwatch::${AWS::AccountId}:*
                Effect: Allow
              - Sid: Reports
                Action:
                  - cloudwatch:getMetricWidgetImage
                Resource: '*'
                Effect: Allow
              - Sid: InvokeLambda
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt SqsPolicyUpdaterFunction.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SqsPolicyAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:GetQueueAttributes
                  - sqs:SetQueueAttributes
                Resource: !GetAtt SqsQueueForExperiment.Arn
