description: 'Apply a deny-all policy to SQS queue to simulate impairment using SQS:AddPermission and SQS:RemovePermission'
schemaVersion: '0.3'
parameters:
  sqsQueueUrl:
    type: String
    description: 'URL of the SQS queue to impair'
  duration:
    type: String
    description: 'Duration of the impairment in ISO8601 format'
    default: 'PT10M'

mainSteps:
  - name: applyDenyAllPolicy
    action: aws:executeAwsApi
    onFailure: 'step:removeDenyAllPolicy'
    onCancel: 'step:removeDenyAllPolicy'
    inputs:
      Service: sqs
      Api: AddPermission
      QueueUrl: '{{ sqsQueueUrl }}'
      Label: 'FISTemporaryDeny'
      AWSAccountIds: ['*']
      Actions: 
        - 'sqs:DeleteMessage'
        - 'sqs:ChangeMessageVisibility'
        - 'sqs:PurgeQueue'
        - 'sqs:ReceiveMessage'
        - 'sqs:SendMessage'
      # Setting Effect to Deny - this is the key part that simulates the impairment
      # Note: AddPermission normally adds Allow permissions, but we're using it with a special configuration
      # to effectively deny access
      Effect: 'Deny'
    description: 'Add a deny permission to the SQS queue to simulate impairment'

  - name: waitForDuration
    action: 'aws:sleep'
    onFailure: 'step:removeDenyAllPolicy'
    onCancel: 'step:removeDenyAllPolicy'
    inputs:
      Duration: '{{ duration }}'
    description: 'Wait for the specified duration while the SQS queue is impaired'

  - name: removeDenyAllPolicy
    action: aws:executeAwsApi
    inputs:
      Service: sqs
      Api: RemovePermission
      QueueUrl: '{{ sqsQueueUrl }}'
      Label: 'FISTemporaryDeny'
    description: 'Remove the deny permission from the SQS queue to restore normal operation'
    isEnd: true
