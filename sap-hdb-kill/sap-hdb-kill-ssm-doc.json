{
    "schemaVersion": "2.2",
    "description": "Force terminate SAP HANA database processes using HDB kill-9 command",
    "parameters": {
        "Sid": {
            "type": "String",
            "default": "hdb",
            "description": "SAP HANA System ID (SID)",
            "allowedPattern": "^[A-Za-z][A-Za-z0-9]{2}$"
        }
    },
    "mainSteps": [
        {
            "action": "aws:runShellScript",
            "name": "ValidatePrerequisites",
            "precondition": {
                "StringEquals": [
                    "platformType",
                    "Linux"
                ]
            },
            "inputs": {
                "timeoutSeconds": 30,
                "onFailure": "exit",
                "runCommand": [
                    "#!/bin/bash",
                    "# Convert SID to lowercase for the admin user",
                    "sid_lower=$(echo \"{{Sid}}\" | tr '[:upper:]' '[:lower:]')",
                    "sid_adm=\"${sid_lower}adm\"",
                    "",
                    "# Determine HDB path from sapservices file",
                    "echo \"Determining HDB path from /usr/sap/sapservices...\"",
                    "if [ ! -f /usr/sap/sapservices ]; then",
                    "    echo \"ERROR: /usr/sap/sapservices file not found.\"",
                    "    exit 1",
                    "fi",
                    "",
                    "# Extract instance number from sapservices file",
                    "NN=$(grep -o 'pf=[^[:space:]]*' /usr/sap/sapservices | grep _HDB | awk -F \"/\" '{print $7}'|awk -F \"_\" '{print $2}'|sed 's@^[^0-9]*\\([0-9]\\+\\).*@\\1@')",
                    "if [ -z \"$NN\" ]; then",
                    "    echo \"ERROR: Could not determine HANA instance number from sapservices file.\"",
                    "    exit 1",
                    "fi",
                    "",
                    "# Construct HDB path",
                    "HDB_PATH=\"/usr/sap/HDB/HDB$NN/HDB\"",
                    "echo \"Determined HDB path: $HDB_PATH\"",
                    "",
                    "# Check if HDB path exists and is executable",
                    "if [ ! -x \"$HDB_PATH\" ]; then",
                    "    echo \"ERROR: HDB executable not found at path: $HDB_PATH\"",
                    "    exit 1",
                    "fi",
                    "",
                    "echo \"Starting validation for SAP HANA process kill experiment\"",
                    "echo \"Using HDB path: $HDB_PATH\"",
                    "echo \"SAP HANA SID: {{Sid}}\"",
                    "echo \"SAP HANA admin user: $sid_adm\"",
                    "",
                    "# Check if the experiment file already exists",
                    "if [ -f /tmp/fis_sap_hana_kill_experiment.json ]; then",
                    "    echo 'ERROR: fis_sap_hana_kill_experiment.json already exists. Exiting.'",
                    "    exit 1",
                    "fi",
                    "",
                    "# Check if SAP HANA admin user exists",
                    "echo \"Checking if SAP HANA admin user $sid_adm exists...\"",
                    "if ! id $sid_adm &>/dev/null; then",
                    "    echo \"ERROR: SAP HANA admin user $sid_adm does not exist.\"",
                    "    exit 1",
                    "fi",
                    "echo \"SAP HANA admin user $sid_adm exists\"",
                    "",
                    "# Get hostname for later comparison",
                    "HOSTNAME=$(hostname)",
                    "echo \"Current hostname: $HOSTNAME\"",
                    "",
                    "echo 'All pre-validation checks passed. System is ready for HDB kill test.'",
                    "# Create a validation flag file to indicate successful validation",
                    "touch /tmp/fis_sap_hana_validation_passed",
                    "",
                    "# Store HDB path for other steps to use",
                    "echo \"$HDB_PATH\" > /tmp/fis_sap_hana_hdb_path",
                    "# Store hostname for other steps to use",
                    "echo \"$HOSTNAME\" > /tmp/fis_sap_hana_hostname"
                ]
            }
        },
        {
            "action": "aws:runShellScript",
            "name": "RecordExperimentStart",
            "precondition": {
                "StringEquals": [
                    "platformType",
                    "Linux"
                ]
            },
            "inputs": {
                "timeoutSeconds": 30,
                "onFailure": "exit",
                "runCommand": [
                    "#!/bin/bash",
                    "# Record the start time and store it in JSON",
                    "start_time=$(date +'%Y-%m-%dT%H:%M:%SZ')",
                    "# Convert SID to lowercase for the admin user",
                    "sid_lower=$(echo \"{{Sid}}\" | tr '[:upper:]' '[:lower:]')",
                    "sid_adm=\"${sid_lower}adm\"",
                    "",
                    "# Get HDB path from the file created in the validation step",
                    "HDB_PATH=$(cat /tmp/fis_sap_hana_hdb_path)",
                    "if [ -z \"$HDB_PATH\" ] || [ ! -x \"$HDB_PATH\" ]; then",
                    "    echo \"ERROR: Could not retrieve valid HDB path from previous step.\"",
                    "    exit 1",
                    "fi",
                    "",
                    "# Get hostname from the file created in the validation step",
                    "HOSTNAME=$(cat /tmp/fis_sap_hana_hostname)",
                    "if [ -z \"$HOSTNAME\" ]; then",
                    "    echo \"ERROR: Could not retrieve hostname from previous step.\"",
                    "    exit 1",
                    "fi",
                    "",
                    "echo \"{ \\\"start_time\\\": \\\"$start_time\\\", \\\"sid\\\": \\\"{{Sid}}\\\", \\\"sid_adm\\\": \\\"$sid_adm\\\", \\\"hdb_path\\\": \\\"$HDB_PATH\\\", \\\"hostname\\\": \\\"$HOSTNAME\\\" }\" > /tmp/fis_sap_hana_kill_experiment.json",
                    "echo \"Experiment start time: $start_time\"",
                    "",
                    "# Gather cluster information using crm_mon",
                    "echo \"Gathering cluster information before kill:\"",
                    "if command -v crm_mon &>/dev/null; then",
                    "    crm_mon -A1 --output-as text > /tmp/fis_sap_hana_crm_before.txt",
                    "    cat /tmp/fis_sap_hana_crm_before.txt",
                    "    ",
                    "    # Check if this node is primary or secondary",
                    "    if grep -q \"Promoted:.*\\[ .*$HOSTNAME.* \\]\" /tmp/fis_sap_hana_crm_before.txt; then",
                    "        echo \"This node ($HOSTNAME) is PRIMARY (Promoted)\"",
                    "        echo \"PRIMARY\" > /tmp/fis_sap_hana_node_role",
                    "    elif grep -q \"Unpromoted:.*\\[ .*$HOSTNAME.* \\]\" /tmp/fis_sap_hana_crm_before.txt; then",
                    "        echo \"This node ($HOSTNAME) is SECONDARY (Unpromoted)\"",
                    "        echo \"SECONDARY\" > /tmp/fis_sap_hana_node_role",
                    "    else",
                    "        echo \"WARNING: Could not determine if this node is primary or secondary\"",
                    "        echo \"UNKNOWN\" > /tmp/fis_sap_hana_node_role",
                    "    fi",
                    "else",
                    "    echo \"crm_mon command not found. Skipping cluster information gathering.\"",
                    "    echo \"UNKNOWN\" > /tmp/fis_sap_hana_node_role",
                    "fi"
                ]
            }
        },
        {
            "action": "aws:runShellScript",
            "name": "ExecuteHDBKill",
            "precondition": {
                "StringEquals": [
                    "platformType",
                    "Linux"
                ]
            },
            "inputs": {
                "timeoutSeconds": 600,
                "onFailure": "exit",
                "runCommand": [
                    "#!/bin/bash",
                    "# Log start of experiment",
                    "echo \"Starting SAP HANA process kill experiment using HDB kill-9 command\"",
                    "",
                    "# Convert SID to lowercase for the admin user",
                    "sid_lower=$(echo \"{{Sid}}\" | tr '[:upper:]' '[:lower:]')",
                    "sid_adm=\"${sid_lower}adm\"",
                    "",
                    "# Get HDB path from the file created in the validation step",
                    "HDB_PATH=$(cat /tmp/fis_sap_hana_hdb_path)",
                    "if [ -z \"$HDB_PATH\" ] || [ ! -x \"$HDB_PATH\" ]; then",
                    "    echo \"ERROR: Could not retrieve valid HDB path from previous step.\"",
                    "    exit 1",
                    "fi",
                    "",
                    "# Check if this node is primary or secondary",
                    "NODE_ROLE=$(cat /tmp/fis_sap_hana_node_role)",
                    "if [ \"$NODE_ROLE\" = \"SECONDARY\" ]; then",
                    "    echo \"This node is SECONDARY. Skipping kill command as requested.\"",
                    "    echo \"SKIPPED\" > /tmp/fis_sap_hana_execution_status",
                    "    touch /tmp/fis_sap_hana_execution_completed",
                    "    exit 0",
                    "elif [ \"$NODE_ROLE\" = \"UNKNOWN\" ]; then",
                    "    echo \"WARNING: Could not determine if this node is primary or secondary. Proceeding with caution.\"",
                    "    echo \"UNKNOWN_ROLE\" > /tmp/fis_sap_hana_execution_status",
                    "else",
                    "    echo \"This node is PRIMARY. Proceeding with kill command.\"",
                    "    echo \"EXECUTED\" > /tmp/fis_sap_hana_execution_status",
                    "fi",
                    "",
                    "# Execute the kill command for all HANA processes using HDB kill-9",
                    "echo \"Killing all SAP HANA processes using HDB kill-9 command...\"",
                    "sudo -u $sid_adm \"$HDB_PATH\" kill-9",
                    "",
                    "# Verify processes were killed",
                    "echo \"Checking SAP HANA processes after kill command:\"",
                    "sleep 2  # Give the system a moment to update process status",
                    "if sudo -u $sid_adm ps -ef | grep -i hdb | grep -v grep; then",
                    "    echo \"WARNING: Some HANA processes may still be running\"",
                    "else",
                    "    echo \"All HANA processes successfully terminated\"",
                    "fi",
                    "",
                    "# Mark execution as successful",
                    "touch /tmp/fis_sap_hana_execution_completed"
                ]
            }
        },
        {
            "action": "aws:runShellScript",
            "name": "CleanupExperiment",
            "precondition": {
                "StringEquals": [
                    "platformType",
                    "Linux"
                ]
            },
            "inputs": {
                "timeoutSeconds": 30,
                "runCommand": [
                    "#!/bin/bash",
                    "# Clean up validation flag file if it exists",
                    "if [ -f /tmp/fis_sap_hana_validation_passed ]; then",
                    "    rm -f /tmp/fis_sap_hana_validation_passed",
                    "fi",
                    "",
                    "# Clean up execution flag file if it exists",
                    "if [ -f /tmp/fis_sap_hana_execution_completed ]; then",
                    "    rm -f /tmp/fis_sap_hana_execution_completed",
                    "fi",
                    "",
                    "# Clean up HDB path file if it exists",
                    "if [ -f /tmp/fis_sap_hana_hdb_path ]; then",
                    "    rm -f /tmp/fis_sap_hana_hdb_path",
                    "fi",
                    "",
                    "# Clean up hostname file if it exists",
                    "if [ -f /tmp/fis_sap_hana_hostname ]; then",
                    "    rm -f /tmp/fis_sap_hana_hostname",
                    "fi",
                    "",
                    "# Clean up node role file if it exists",
                    "if [ -f /tmp/fis_sap_hana_node_role ]; then",
                    "    rm -f /tmp/fis_sap_hana_node_role",
                    "fi",
                    "",
                    "# Read experiment data from the JSON file",
                    "if [ -f /tmp/fis_sap_hana_kill_experiment.json ]; then",
                    "    start_time=$(jq -r .start_time /tmp/fis_sap_hana_kill_experiment.json 2>/dev/null || echo \"unknown\")",
                    "    sid=$(jq -r .sid /tmp/fis_sap_hana_kill_experiment.json 2>/dev/null || echo \"unknown\")",
                    "    sid_adm=$(jq -r .sid_adm /tmp/fis_sap_hana_kill_experiment.json 2>/dev/null || echo \"unknown\")",
                    "    hdb_path=$(jq -r .hdb_path /tmp/fis_sap_hana_kill_experiment.json 2>/dev/null || echo \"unknown\")",
                    "    hostname=$(jq -r .hostname /tmp/fis_sap_hana_kill_experiment.json 2>/dev/null || echo \"unknown\")",
                    "    ",
                    "    # Calculate experiment duration if we have a valid start time",
                    "    if [ \"$start_time\" != \"unknown\" ]; then",
                    "        # Try to calculate duration, but don't fail if date command doesn't support -d option",
                    "        if date -d \"$start_time\" +%s &>/dev/null; then",
                    "            start_time_epoch=$(date -d \"$start_time\" +%s)",
                    "            current_time_epoch=$(date +%s)",
                    "            elapsed_time=$((current_time_epoch - start_time_epoch))",
                    "            echo \"Experiment completed. Duration: $elapsed_time seconds\"",
                    "        else",
                    "            echo \"Experiment completed. Start time: $start_time\"",
                    "        fi",
                    "        ",
                    "        # Check execution status",
                    "        if [ -f /tmp/fis_sap_hana_execution_status ]; then",
                    "            execution_status=$(cat /tmp/fis_sap_hana_execution_status)",
                    "            if [ \"$execution_status\" = \"SKIPPED\" ]; then",
                    "                echo \"Kill command was SKIPPED because this node ($hostname) is SECONDARY\"",
                    "            elif [ \"$execution_status\" = \"EXECUTED\" ]; then",
                    "                echo \"Killed all HANA processes on PRIMARY node ($hostname) (SID: $sid, Admin user: $sid_adm)\"",
                    "                echo \"Used HDB path: $hdb_path\"",
                    "            else",
                    "                echo \"Experiment executed with status: $execution_status\"",
                    "                echo \"Used HDB path: $hdb_path\"",
                    "            fi",
                    "            rm -f /tmp/fis_sap_hana_execution_status",
                    "        else",
                    "            echo \"Experiment may not have completed successfully.\"",
                    "        fi",
                    "    else",
                    "        echo \"Experiment may not have completed successfully.\"",
                    "    fi",
                    "    ",
                    "    # Gather final cluster information using crm_mon",
                    "    echo \"Final cluster information after experiment:\"",
                    "    if command -v crm_mon &>/dev/null; then",
                    "        crm_mon -A1 --output-as text || echo \"crm_mon command failed or not available\"",
                    "    else",
                    "        echo \"crm_mon command not found. Skipping cluster information gathering.\"",
                    "    fi",
                    "    ",
                    "    # Clean up experiment file",
                    "    echo 'Cleaning up: Deleting /tmp/fis_sap_hana_kill_experiment.json'",
                    "    rm -f /tmp/fis_sap_hana_kill_experiment.json",
                    "    echo 'JSON file deleted successfully.'",
                    "else",
                    "    echo 'Warning: Experiment file not found. Experiment may not have started properly.'",
                    "fi",
                    "",
                    "# Clean up crm_mon output file if it exists",
                    "if [ -f /tmp/fis_sap_hana_crm_before.txt ]; then",
                    "    rm -f /tmp/fis_sap_hana_crm_before.txt",
                    "fi",
                    "",
                    "# Note: We don't automatically restart HANA as this is a fault injection test",
                    "# The SAP automation or operations team should handle recovery",
                    "echo \"Note: SAP HANA processes were terminated as part of the fault injection test.\"",
                    "echo \"Manual intervention or automated recovery procedures should now be triggered.\""
                ]
            }
        }
    ]
}
