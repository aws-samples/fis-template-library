 schemaVersion: '2.2'
   description: 'Run database load test'
   parameters: {}
   mainSteps:
   - action: 'aws:runShellScript'
     name: 'runLoadTest'
     inputs:
       timeoutSeconds: '600'
       runCommand:
       - |
         #!/bin/bash
          # Configuration
          DB_HOST="${1:-rds-loadtest-stack-rdsinstance-13dayw9c8vry.cddryekhk93k.us-east-1.rds.amazonaws.com}"
          DB_PORT="${2:-5432}"
          DB_NAME="${3:-mydb}"
          DB_USER="${4:-dbadmin}"
          DB_PASSWORD="${5:-NewPassword123!}"
          NUM_RECORDS="${6:-10000}"
          CONCURRENCY="${7:-5}"
          DURATION="${8:-60}"  # Duration in seconds

          # Function to execute SQL
          execute_sql() {
            PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "$1"
          }

          # Function to execute SQL and return result
          execute_sql_return() {
            PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -t -c "$1"
          }

          # Check connection
          echo "Checking connection to PostgreSQL..."
          if ! execute_sql "\conninfo"; then
            echo "Failed to connect to PostgreSQL. Please check your connection parameters."
            exit 1
          fi

          # Create test tables if they don't exist
          echo "Setting up test tables..."
          execute_sql "
          CREATE TABLE IF NOT EXISTS load_test_users (
            id SERIAL PRIMARY KEY,
            username VARCHAR(50) NOT NULL,
            email VARCHAR(100) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            status VARCHAR(20) DEFAULT 'active',
            login_count INTEGER DEFAULT 0
          );

          CREATE INDEX IF NOT EXISTS idx_load_test_users_username ON load_test_users(username);
          CREATE INDEX IF NOT EXISTS idx_load_test_users_email ON load_test_users(email);
          CREATE INDEX IF NOT EXISTS idx_load_test_users_status ON load_test_users(status);

          CREATE TABLE IF NOT EXISTS load_test_transactions (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES load_test_users(id),
            amount DECIMAL(10,2) NOT NULL,
            transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            description TEXT,
            category VARCHAR(50)
          );

          CREATE INDEX IF NOT EXISTS idx_load_test_transactions_user_id ON load_test_transactions(user_id);
          CREATE INDEX IF NOT EXISTS idx_load_test_transactions_date ON load_test_transactions(transaction_date);
          CREATE INDEX IF NOT EXISTS idx_load_test_transactions_category ON load_test_transactions(category);
          "

          # Check if we need to populate the tables
          user_count=$(execute_sql_return "SELECT COUNT(*) FROM load_test_users;")
          if [ "$user_count" -lt "$NUM_RECORDS" ]; then
            echo "Populating test tables with initial data..."
            
            # Generate random data for users
            for i in $(seq 1 $NUM_RECORDS); do
              username="user_$(printf "%05d" $i)"
              email="user_$(printf "%05d" $i)@example.com"
              status=$( [ $(($RANDOM % 10)) -lt 8 ] && echo "active" || echo "inactive" )
              login_count=$(($RANDOM % 100))
              
              execute_sql "INSERT INTO load_test_users (username, email, status, login_count) 
                          VALUES ('$username', '$email', '$status', $login_count);"
              
              # Print progress every 100 records
              if [ $(($i % 100)) -eq 0 ]; then
                echo "Inserted $i users..."
              fi
            done
            
            # Generate transactions for each user
            echo "Generating transactions..."
            execute_sql "
            INSERT INTO load_test_transactions (user_id, amount, transaction_date, description, category)
            SELECT 
              id as user_id,
              (random() * 1000)::numeric(10,2) as amount,
              NOW() - (random() * interval '90 days') as transaction_date,
              'Transaction description ' || id as description,
              CASE (id % 5)
                WHEN 0 THEN 'food'
                WHEN 1 THEN 'entertainment'
                WHEN 2 THEN 'transport'
                WHEN 3 THEN 'utilities'
                ELSE 'other'
              END as category
            FROM load_test_users;
            "
            
            echo "Initial data population complete."
          fi

          # Function to run a simple query
          run_simple_query() {
            local pid=$1
            local query="SELECT * FROM load_test_users ORDER BY RANDOM() LIMIT 10;"
            while [ true ]; do
              execute_sql "$query" > /dev/null
              sleep 0.1
            done
          }

          # Function to run a medium complexity query
          run_medium_query() {
            local pid=$1
            local query="
            SELECT u.username, COUNT(t.id) as transaction_count, SUM(t.amount) as total_amount
            FROM load_test_users u
            JOIN load_test_transactions t ON u.id = t.user_id
            WHERE u.status = 'active'
            GROUP BY u.username
            ORDER BY total_amount DESC
            LIMIT 20;
            "
            while [ true ]; do
              execute_sql "$query" > /dev/null
              sleep 0.5
            done
          }

          # Function to run a complex query
          run_complex_query() {
            local pid=$1
            local query="
            WITH monthly_stats AS (
              SELECT 
                u.id as user_id,
                u.username,
                DATE_TRUNC('month', t.transaction_date) as month,
                COUNT(t.id) as transaction_count,
                SUM(t.amount) as total_amount,
                AVG(t.amount) as avg_amount,
                t.category
              FROM load_test_users u
              JOIN load_test_transactions t ON u.id = t.user_id
              WHERE u.login_count > 10
              GROUP BY u.id, u.username, DATE_TRUNC('month', t.transaction_date), t.category
            )
            SELECT 
              username,
              month,
              category,
              transaction_count,
              total_amount,
              avg_amount,
              RANK() OVER (PARTITION BY month, category ORDER BY total_amount DESC) as rank
            FROM monthly_stats
            ORDER BY month DESC, category, rank
            LIMIT 50;
            "
            while [ true ]; do
              execute_sql "$query" > /dev/null
              sleep 1
            done
          }

          # Function to run insert operations
          run_insert_operations() {
            local pid=$1
            while [ true ]; do
              local username="user_$(date +%s%N | md5sum | head -c 10)"
              local email="${username}@example.com"
              local status=$( [ $(($RANDOM % 10)) -lt 8 ] && echo "active" || echo "inactive" )
              local login_count=$(($RANDOM % 100))
              
              # Insert a new user
              local user_id=$(execute_sql_return "
                INSERT INTO load_test_users (username, email, status, login_count) 
                VALUES ('$username', '$email', '$status', $login_count)
                RETURNING id;
              ")
              
              # Insert transactions for this user
              local num_transactions=$(($RANDOM % 5 + 1))
              for j in $(seq 1 $num_transactions); do
                local amount=$(printf "%.2f" $(echo "scale=2; $RANDOM/100" | bc))
                local days_ago=$(($RANDOM % 90))
                local category_id=$(($RANDOM % 5))
                local category=""
                
                case $category_id in
                  0) category="food" ;;
                  1) category="entertainment" ;;
                  2) category="transport" ;;
                  3) category="utilities" ;;
                  *) category="other" ;;
                esac
                
                execute_sql "
                  INSERT INTO load_test_transactions (user_id, amount, transaction_date, description, category)
                  VALUES ($user_id, $amount, NOW() - INTERVAL '$days_ago days', 'Transaction for $username', '$category');
                " > /dev/null
              done
              
              sleep 0.2
            done
          }

          # Function to monitor PostgreSQL statistics
          monitor_postgres_stats() {
            while [ true ]; do
              echo "--- PostgreSQL Statistics $(date) ---"
              execute_sql "
              SELECT 
                numbackends as connections,
                xact_commit as commits,
                xact_rollback as rollbacks,
                blks_read,
                blks_hit,
                tup_returned,
                tup_fetched,
                tup_inserted,
                tup_updated,
                tup_deleted
              FROM pg_stat_database
              WHERE datname = '$DB_NAME';
              "
              sleep 5
            done
          }

          # Start the load test
          echo "Starting load test with concurrency $CONCURRENCY for $DURATION seconds..."

          # Start monitoring in the background
          monitor_postgres_stats &
          MONITOR_PID=$!

          # Start the worker processes
          pids=()

          # Start simple query workers
          for i in $(seq 1 $CONCURRENCY); do
            run_simple_query $i &
            pids+=($!)
          done

          # Start medium query workers
          for i in $(seq 1 $(($CONCURRENCY / 2))); do
            run_medium_query $i &
            pids+=($!)
          done

          # Start complex query workers
          for i in $(seq 1 $(($CONCURRENCY / 3))); do
            run_complex_query $i &
            pids+=($!)
          done

          # Start insert operations
          for i in $(seq 1 $(($CONCURRENCY / 4 + 1))); do
            run_insert_operations $i &
            pids+=($!)
          done

          echo "Load test is running with ${#pids[@]} worker processes. Will run for $DURATION seconds."

          # Sleep for the specified duration
          sleep $DURATION

          # Kill all worker processes
          echo "Stopping load test..."
          for pid in "${pids[@]}"; do
            kill -9 $pid 2>/dev/null
          done

          # Kill the monitoring process
          kill -9 $MONITOR_PID 2>/dev/null

          # Final statistics
          echo "--- Final Database Statistics ---"
          execute_sql "
          SELECT COUNT(*) as total_users FROM load_test_users;
          SELECT COUNT(*) as total_transactions FROM load_test_transactions;
          "

          echo "Load test completed."
