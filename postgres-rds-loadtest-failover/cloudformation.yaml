AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC with EC2 (SSM access) and RDS PostgreSQL deployment'

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC

  DBName:
    Type: String
    Default: mydb
    Description: PostgreSQL database name

  DBUsername:
    Type: String
    Description: PostgreSQL admin username
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"

  DBPassword:
    Type: String
    NoEcho: true
    Description: PostgreSQL admin password
    MinLength: 8

Resources:
  # VPC Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: My VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: My Internet Gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Cidr [!Ref VpcCIDR, 4, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [!Ref VpcCIDR, 4, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Cidr [!Ref VpcCIDR, 4, 8]]
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private Subnet 2

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table

  # Routes
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Route Table Associations
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress: []  # No inbound rules needed for SSM
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic

  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for VPC Endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          Description: Allow HTTPS from EC2 instances
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  # VPC Endpoints for SSM - Adding all required endpoints
  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  EC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  # S3 Gateway Endpoint (needed for SSM)
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable

  # IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0aa7d40eeae50c9a9  # Amazon Linux 2 AMI in us-east-1
      SubnetId: !Ref PrivateSubnet1
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update system and install required packages
          yum update -y
          yum install -y amazon-ssm-agent
          
          # Clean yum cache to avoid repository issues
          yum clean all
          rm -rf /var/cache/yum
          
          # Install PostgreSQL client
          yum install -y postgresql
          
          # Make sure psql is in PATH for all users
          echo 'export PATH=$PATH:/usr/bin' > /etc/profile.d/psql-path.sh
          chmod +x /etc/profile.d/psql-path.sh
          
          # Create symlink to ensure psql is available in common paths
          if [ -f /usr/bin/psql ]; then
            ln -sf /usr/bin/psql /usr/local/bin/psql
          fi
          
          # Make sure ssm-user can run psql without sudo
          # Create a wrapper script in /usr/local/bin that all users can execute
          cat > /usr/local/bin/pg_connect << 'EOF'
          #!/bin/bash
          # This script allows non-root users to connect to PostgreSQL
          if [ $# -lt 3 ]; then
            echo "Usage: pg_connect <password> <username> <database>"
            exit 1
          fi
          PGPASSWORD=$1 psql -h ${RDSInstance.Endpoint.Address} -p ${RDSInstance.Endpoint.Port} -U $2 -d $3
          EOF
          
          chmod +x /usr/local/bin/pg_connect
          
          # Ensure SSM agent is running
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          
          # Create a script to check and restart SSM agent if needed
          cat > /usr/local/bin/check-ssm-agent.sh << 'EOF'
          #!/bin/bash
          if ! pgrep -f amazon-ssm-agent > /dev/null; then
            echo "SSM agent is not running. Restarting..."
            systemctl restart amazon-ssm-agent
          fi
          EOF
          
          chmod +x /usr/local/bin/check-ssm-agent.sh
          
          # Add a cron job to check SSM agent every minute
          echo "* * * * * root /usr/local/bin/check-ssm-agent.sh" > /etc/cron.d/check-ssm-agent
          
          # Log the installation status
          echo "PostgreSQL client installation status:" > /var/log/user-data-complete.log
          if command -v psql &> /dev/null; then
            echo "PostgreSQL client installed successfully: $(which psql)" >> /var/log/user-data-complete.log
            psql --version >> /var/log/user-data-complete.log
          else
            echo "PostgreSQL client installation FAILED" >> /var/log/user-data-complete.log
          fi
          
          # Log the completion
          echo "EC2 instance setup completed at $(date)" >> /var/log/user-data-complete.log
      Tags:
        - Key: Name
          Value: SSM Managed Instance

  # RDS DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # RDS Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: db.t3.micro
      AllocatedStorage: '20'
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false

Outputs:
  EC2InstanceId:
    Description: EC2 Instance ID for SSM Session Manager
    Value: !Ref EC2Instance

  RDSEndpoint:
    Description: RDS Instance Endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address

  RDSPort:
    Description: RDS Instance Port
    Value: !GetAtt RDSInstance.Endpoint.Port
