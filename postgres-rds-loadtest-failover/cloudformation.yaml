AWSTemplateFormatVersion: '2010-09-09'
Description: 'VPC with EC2 (SSM access) and RDS PostgreSQL deployment'

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0e731c8a588258d0d # Amazon Linux 2 AMI in us-east-1
    us-east-2:
      AMI: ami-0f9c9c7e59304193e # Amazon Linux 2 AMI in us-east-2
    us-west-1:
      AMI: ami-0ce2cb35386fc22e9 # Amazon Linux 2 AMI in us-west-1
    us-west-2:
      AMI: ami-0b75998a97c952252 # Amazon Linux 2 AMI in us-west-2
    eu-west-1:
      AMI: ami-0e309a5f3a6dd97ea # Amazon Linux 2 AMI in eu-west-1
    eu-central-1:
      AMI: ami-0a9e2b8a093c01e43 # Amazon Linux 2 AMI in eu-central-1
    ap-northeast-1:
      AMI: ami-0f36b22ddc523dec8 # Amazon Linux 2 AMI in ap-northeast-1
    ap-southeast-1:
      AMI: ami-0dc5785603ad4ff54 # Amazon Linux 2 AMI in ap-southeast-1
    ap-southeast-2:
      AMI: ami-0310483fb2b488153 # Amazon Linux 2 AMI in ap-southeast-2

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC

  DBName:
    Type: String
    Default: mydb
    Description: PostgreSQL database name

  DBUsername:
    Type: String
    Description: PostgreSQL admin username
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"

  DBPassword:
    Type: String
    NoEcho: true
    Description: PostgreSQL admin password
    MinLength: 8

Resources:
  # VPC Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: My VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: My Internet Gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Cidr [!Ref VpcCIDR, 4, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [!Ref VpcCIDR, 4, 8]]
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Cidr [!Ref VpcCIDR, 4, 8]]
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private Subnet 2

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table

  # Routes
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Route Table Associations
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EC2 Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress: []  # No inbound rules needed for SSM
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic

  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for VPC Endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          Description: Allow HTTPS from EC2 instances
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  # VPC Endpoints for SSM - Adding all required endpoints
  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  EC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  # S3 Gateway Endpoint (needed for SSM)
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable

  # IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role
        
  # FIS Experiment Role with proper trust policy
  FISExperimentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: FISExperimentRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: fis.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSFaultInjectionSimulatorSSMAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      SubnetId: !Ref PrivateSubnet1
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update system and install required packages
          yum update -y
          yum install -y amazon-ssm-agent
          
          # Clean yum cache to avoid repository issues
          yum clean all
          rm -rf /var/cache/yum
          
          # Install PostgreSQL client
          yum install -y postgresql
          
          # Make sure psql is in PATH for all users
          echo 'export PATH=$PATH:/usr/bin' > /etc/profile.d/psql-path.sh
          chmod +x /etc/profile.d/psql-path.sh
          
          # Create symlink to ensure psql is available in common paths
          if [ -f /usr/bin/psql ]; then
            ln -sf /usr/bin/psql /usr/local/bin/psql
          fi
          
          # Make sure ssm-user can run psql without sudo
          # Create a wrapper script in /usr/local/bin that all users can execute
          cat > /usr/local/bin/pg_connect << 'EOF'
          #!/bin/bash
          # This script allows non-root users to connect to PostgreSQL
          if [ $# -lt 3 ]; then
            echo "Usage: pg_connect <password> <username> <database>"
            exit 1
          fi
          PGPASSWORD=$1 psql -h ${RDSInstance.Endpoint.Address} -p ${RDSInstance.Endpoint.Port} -U $2 -d $3
          EOF
          
          chmod +x /usr/local/bin/pg_connect
          
          # Ensure SSM agent is running
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          
          # Create a script to check and restart SSM agent if needed
          cat > /usr/local/bin/check-ssm-agent.sh << 'EOF'
          #!/bin/bash
          if ! pgrep -f amazon-ssm-agent > /dev/null; then
            echo "SSM agent is not running. Restarting..."
            systemctl restart amazon-ssm-agent
          fi
          EOF
          
          chmod +x /usr/local/bin/check-ssm-agent.sh
          
          # Add a cron job to check SSM agent every minute
          echo "* * * * * root /usr/local/bin/check-ssm-agent.sh" > /etc/cron.d/check-ssm-agent
          
          # Log the installation status
          echo "PostgreSQL client installation status:" > /var/log/user-data-complete.log
          if command -v psql &> /dev/null; then
            echo "PostgreSQL client installed successfully: $(which psql)" >> /var/log/user-data-complete.log
            psql --version >> /var/log/user-data-complete.log
          else
            echo "PostgreSQL client installation FAILED" >> /var/log/user-data-complete.log
          fi
          
          # Log the completion
          echo "EC2 instance setup completed at $(date)" >> /var/log/user-data-complete.log
      Tags:
        - Key: Name
          Value: SSM Managed Instance

  # RDS DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  # RDS Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: db.t3.micro
      AllocatedStorage: '20'
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false

  # SSM Document for Load Test
  LoadTestSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Name: RunLoadTest
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: 'Run database load test'
        parameters:
          DBHost:
            type: String
            description: "Database host endpoint"
            default: !GetAtt RDSInstance.Endpoint.Address
          DBPort:
            type: String
            description: "Database port"
            default: !GetAtt RDSInstance.Endpoint.Port
          DBName:
            type: String
            description: "Database name"
            default: !Ref DBName
          DBUser:
            type: String
            description: "Database username"
            default: !Ref DBUsername
          DBPassword:
            type: String
            description: "Database password"
            default: !Ref DBPassword
          NumRecords:
            type: String
            description: "Number of records to generate"
            default: "10000"
          Concurrency:
            type: String
            description: "Concurrency level for the load test"
            default: "5"
          Duration:
            type: String
            description: "Duration of the load test in seconds"
            default: "60"
        mainSteps:
        - action: 'aws:runShellScript'
          name: 'installDependencies'
          inputs:
            runCommand:
            - |
              #!/bin/bash
              # Install newer PostgreSQL client
              sudo amazon-linux-extras enable postgresql13
              sudo yum clean metadata
              sudo yum install -y postgresql
        - action: 'aws:runShellScript'
          name: 'runLoadTest'
          inputs:
            timeoutSeconds: '600'
            runCommand:
            - |
              #!/bin/bash
              # Configuration
              DB_HOST="{{ DBHost }}"
              DB_PORT="{{ DBPort }}"
              DB_NAME="{{ DBName }}"
              DB_USER="{{ DBUser }}"
              DB_PASSWORD="{{ DBPassword }}"
              NUM_RECORDS="{{ NumRecords }}"
              CONCURRENCY="{{ Concurrency }}"
              DURATION="{{ Duration }}"  # Duration in seconds

              # Function to execute SQL
              execute_sql() {
                PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "$1"
              }

              # Function to execute SQL and return result
              execute_sql_return() {
                PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -t -c "$1"
              }

              # Check connection
              echo "Checking connection to PostgreSQL..."
              if ! execute_sql "\conninfo"; then
                echo "Failed to connect to PostgreSQL. Please check your connection parameters."
                exit 1
              fi

              # Create test tables if they don't exist
              echo "Setting up test tables..."
              execute_sql "
              CREATE TABLE IF NOT EXISTS load_test_users (
                id SERIAL PRIMARY KEY,
                username VARCHAR(50) NOT NULL,
                email VARCHAR(100) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                status VARCHAR(20) DEFAULT 'active',
                login_count INTEGER DEFAULT 0
              );

              CREATE INDEX IF NOT EXISTS idx_load_test_users_username ON load_test_users(username);
              CREATE INDEX IF NOT EXISTS idx_load_test_users_email ON load_test_users(email);
              CREATE INDEX IF NOT EXISTS idx_load_test_users_status ON load_test_users(status);

              CREATE TABLE IF NOT EXISTS load_test_transactions (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES load_test_users(id),
                amount DECIMAL(10,2) NOT NULL,
                transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                description TEXT,
                category VARCHAR(50)
              );

              CREATE INDEX IF NOT EXISTS idx_load_test_transactions_user_id ON load_test_transactions(user_id);
              CREATE INDEX IF NOT EXISTS idx_load_test_transactions_date ON load_test_transactions(transaction_date);
              CREATE INDEX IF NOT EXISTS idx_load_test_transactions_category ON load_test_transactions(category);
              "

              # Check if we need to populate the tables
              user_count=$(execute_sql_return "SELECT COUNT(*) FROM load_test_users;")
              if [ "$user_count" -lt "$NUM_RECORDS" ]; then
                echo "Populating test tables with initial data..."
                
                # Generate random data for users
                for i in $(seq 1 $NUM_RECORDS); do
                  username="user_$(printf "%05d" $i)"
                  email="user_$(printf "%05d" $i)@example.com"
                  status=$( [ $(($RANDOM % 10)) -lt 8 ] && echo "active" || echo "inactive" )
                  login_count=$(($RANDOM % 100))
                  
                  execute_sql "INSERT INTO load_test_users (username, email, status, login_count) 
                              VALUES ('$username', '$email', '$status', $login_count);"
                  
                  # Print progress every 100 records
                  if [ $(($i % 100)) -eq 0 ]; then
                    echo "Inserted $i users..."
                  fi
                done
                
                # Generate transactions for each user
                echo "Generating transactions..."
                execute_sql "
                INSERT INTO load_test_transactions (user_id, amount, transaction_date, description, category)
                SELECT 
                  id as user_id,
                  (random() * 1000)::numeric(10,2) as amount,
                  NOW() - (random() * interval '90 days') as transaction_date,
                  'Transaction description ' || id as description,
                  CASE (id % 5)
                    WHEN 0 THEN 'food'
                    WHEN 1 THEN 'entertainment'
                    WHEN 2 THEN 'transport'
                    WHEN 3 THEN 'utilities'
                    ELSE 'other'
                  END as category
                FROM load_test_users;
                "
                
                echo "Initial data population complete."
              fi

              # Function to run a simple query
              run_simple_query() {
                local pid=$1
                local query="SELECT * FROM load_test_users ORDER BY RANDOM() LIMIT 10;"
                while [ true ]; do
                  execute_sql "$query" > /dev/null
                  sleep 0.1
                done
              }

              # Function to run a medium complexity query
              run_medium_query() {
                local pid=$1
                local query="
                SELECT u.username, COUNT(t.id) as transaction_count, SUM(t.amount) as total_amount
                FROM load_test_users u
                JOIN load_test_transactions t ON u.id = t.user_id
                WHERE u.status = 'active'
                GROUP BY u.username
                ORDER BY total_amount DESC
                LIMIT 20;
                "
                while [ true ]; do
                  execute_sql "$query" > /dev/null
                  sleep 0.5
                done
              }

              # Function to run a complex query
              run_complex_query() {
                local pid=$1
                local query="
                WITH monthly_stats AS (
                  SELECT 
                    u.id as user_id,
                    u.username,
                    DATE_TRUNC('month', t.transaction_date) as month,
                    COUNT(t.id) as transaction_count,
                    SUM(t.amount) as total_amount,
                    AVG(t.amount) as avg_amount,
                    t.category
                  FROM load_test_users u
                  JOIN load_test_transactions t ON u.id = t.user_id
                  WHERE u.login_count > 10
                  GROUP BY u.id, u.username, DATE_TRUNC('month', t.transaction_date), t.category
                )
                SELECT 
                  username,
                  month,
                  category,
                  transaction_count,
                  total_amount,
                  avg_amount,
                  RANK() OVER (PARTITION BY month, category ORDER BY total_amount DESC) as rank
                FROM monthly_stats
                ORDER BY month DESC, category, rank
                LIMIT 50;
                "
                while [ true ]; do
                  execute_sql "$query" > /dev/null
                  sleep 1
                done
              }

              # Function to run insert operations
              run_insert_operations() {
                local pid=$1
                while [ true ]; do
                  local username="user_$(date +%s%N | md5sum | head -c 10)"
                  local email="${username}@example.com"
                  local status=$( [ $(($RANDOM % 10)) -lt 8 ] && echo "active" || echo "inactive" )
                  local login_count=$(($RANDOM % 100))
                  
                  # Insert a new user
                  local user_id=$(execute_sql_return "
                    INSERT INTO load_test_users (username, email, status, login_count) 
                    VALUES ('$username', '$email', '$status', $login_count)
                    RETURNING id;
                  ")
                  
                  # Insert transactions for this user
                  local num_transactions=$(($RANDOM % 5 + 1))
                  for j in $(seq 1 $num_transactions); do
                    local amount=$(printf "%.2f" $(echo "scale=2; $RANDOM/100" | bc))
                    local days_ago=$(($RANDOM % 90))
                    local category_id=$(($RANDOM % 5))
                    local category=""
                    
                    case $category_id in
                      0) category="food" ;;
                      1) category="entertainment" ;;
                      2) category="transport" ;;
                      3) category="utilities" ;;
                      *) category="other" ;;
                    esac
                    
                    execute_sql "
                      INSERT INTO load_test_transactions (user_id, amount, transaction_date, description, category)
                      VALUES ($user_id, $amount, NOW() - INTERVAL '$days_ago days', 'Transaction for $username', '$category');
                    " > /dev/null
                  done
                  
                  sleep 0.2
                done
              }

              # Function to monitor PostgreSQL statistics
              monitor_postgres_stats() {
                while [ true ]; do
                  echo "--- PostgreSQL Statistics $(date) ---"
                  execute_sql "
                  SELECT 
                    numbackends as connections,
                    xact_commit as commits,
                    xact_rollback as rollbacks,
                    blks_read,
                    blks_hit,
                    tup_returned,
                    tup_fetched,
                    tup_inserted,
                    tup_updated,
                    tup_deleted
                  FROM pg_stat_database
                  WHERE datname = '$DB_NAME';
                  "
                  sleep 5
                done
              }

              # Start the load test
              echo "Starting load test with concurrency $CONCURRENCY for $DURATION seconds..."

              # Start monitoring in the background
              monitor_postgres_stats &
              MONITOR_PID=$!

              # Start the worker processes
              pids=()

              # Start simple query workers
              for i in $(seq 1 $CONCURRENCY); do
                run_simple_query $i &
                pids+=($!)
              done

              # Start medium query workers
              for i in $(seq 1 $(($CONCURRENCY / 2))); do
                run_medium_query $i &
                pids+=($!)
              done

              # Start complex query workers
              for i in $(seq 1 $(($CONCURRENCY / 3))); do
                run_complex_query $i &
                pids+=($!)
              done

              # Start insert operations
              for i in $(seq 1 $(($CONCURRENCY / 4 + 1))); do
                run_insert_operations $i &
                pids+=($!)
              done

              echo "Load test is running with ${#pids[@]} worker processes. Will run for $DURATION seconds."

              # Sleep for the specified duration
              sleep $DURATION

              # Kill all worker processes
              echo "Stopping load test..."
              for pid in "${pids[@]}"; do
                kill -9 $pid 2>/dev/null
              done

              # Kill the monitoring process
              kill -9 $MONITOR_PID 2>/dev/null

              # Final statistics
              echo "--- Final Database Statistics ---"
              execute_sql "
              SELECT COUNT(*) as total_users FROM load_test_users;
              SELECT COUNT(*) as total_transactions FROM load_test_transactions;
              "

              echo "Load test completed."

Outputs:
  EC2InstanceId:
    Description: EC2 Instance ID for SSM Session Manager
    Value: !Ref EC2Instance

  RDSEndpoint:
    Description: RDS Instance Endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address

  RDSPort:
    Description: RDS Instance Port
    Value: !GetAtt RDSInstance.Endpoint.Port
    
  SSMDocumentName:
    Description: Name of the SSM document for load testing
    Value: !Ref LoadTestSSMDocument
    
